//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.17626
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MRZS
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using MRZS.Web;
    
    
    /// <summary>
    /// Контекст полнофункционального интернет-приложения (RIA).
    /// </summary>
    /// <remarks>
    /// Данный контекст расширяет базовый и делает доступными службы и типы приложений,
    /// которые могут быть использованы в коде и xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализирует новый экземпляр класса WebContext.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает контекст, зарегистрированный как объект времени существования в данном приложении.
        /// </summary>
        /// Исключение <exception cref="InvalidOperationException"> вызывается в том случае, если отсутствует текущее приложение,
        /// не добавлено ни одного контекста либо было добавлено более одного контекста.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Возвращает пользователя, прошедшего проверку подлинности.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace MRZS.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using MRZS.Web.Resources;
    
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "AuthenticationService" DomainService.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="AuthenticationContext"/>.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("MRZS-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="AuthenticationContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы AuthenticationService.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="AuthenticationContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="User"/>, загруженных в данный экземпляр <see cref="AuthenticationContext"/>.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="User"/> с помощью запроса "GetUser".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="User"/>.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="User"/> с помощью запроса "Login".
        /// </summary>
        /// <param name="userName">Значение параметра "userName" для запроса.</param>
        /// <param name="password">Значение параметра "password" для запроса.</param>
        /// <param name="isPersistent">Значение параметра "isPersistent" для запроса.</param>
        /// <param name="customData">Значение параметра "customData" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="User"/>.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="User"/> с помощью запроса "Logout".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="User"/>.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "AuthenticationService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetUser".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetUser".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetUser".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetUser".</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "Login".
            /// </summary>
            /// <param name="userName">Значение параметра "userName" для данного действия.</param>
            /// <param name="password">Значение параметра "password" для данного действия.</param>
            /// <param name="isPersistent">Значение параметра "isPersistent" для данного действия.</param>
            /// <param name="customData">Значение параметра "customData" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginLogin".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginLogin".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "Login".</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "Logout".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginLogout".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginLogout".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "Logout".</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// Класс сущности "RegistrationData".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web")]
    public sealed partial class RegistrationData : Entity
    {
        
        private string _answer;
        
        private string _email;
        
        private string _firstName;
        
        private string _friendlyName;
        
        private int _groupId;
        
        private string _groupName;
        
        private string _lastName;
        
        private string _question;
        
        private Nullable<int> _userId;
        
        private string _userName;
        
        private string _userRole;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnGroupIdChanging(int value);
        partial void OnGroupIdChanged();
        partial void OnGroupNameChanging(string value);
        partial void OnGroupNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserIdChanging(Nullable<int> value);
        partial void OnUserIdChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnUserRoleChanging(string value);
        partial void OnUserRoleChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="RegistrationData"/>.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Answer".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Email".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaisePropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "FirstName".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Order=9, ShortName="Имя")]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "FriendlyName".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GroupId".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Order=8, ShortName="Группа")]
        public int GroupId
        {
            get
            {
                return this._groupId;
            }
            set
            {
                if ((this._groupId != value))
                {
                    this.OnGroupIdChanging(value);
                    this.RaiseDataMemberChanging("GroupId");
                    this.ValidateProperty("GroupId", value);
                    this._groupId = value;
                    this.RaiseDataMemberChanged("GroupId");
                    this.OnGroupIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GroupName".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Order=8, ShortName="Группа")]
        public string GroupName
        {
            get
            {
                return this._groupName;
            }
            set
            {
                if ((this._groupName != value))
                {
                    this.OnGroupNameChanging(value);
                    this.RaiseDataMemberChanging("GroupName");
                    this.ValidateProperty("GroupName", value);
                    this._groupName = value;
                    this.RaiseDataMemberChanged("GroupName");
                    this.OnGroupNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "LastName".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Order=10, ShortName="Фамилия")]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.RaiseDataMemberChanging("LastName");
                    this.ValidateProperty("LastName", value);
                    this._lastName = value;
                    this.RaiseDataMemberChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Question".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "UserId".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public Nullable<int> UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "UserName".
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaisePropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "UserRole".
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Order=7, ShortName="Роль")]
        public string UserRole
        {
            get
            {
                return this._userRole;
            }
            set
            {
                if ((this._userRole != value))
                {
                    this.OnUserRoleChanging(value);
                    this.RaiseDataMemberChanging("UserRole");
                    this.ValidateProperty("UserRole", value);
                    this._userRole = value;
                    this.RaiseDataMemberChanged("UserRole");
                    this.OnUserRoleChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            if (((this._email == null) 
                        || (this._userName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._email, this._userName);
        }
    }
    
    /// <summary>
    /// Класс сущности "User".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="User"/>.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "FriendlyName".
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Name".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Roles".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Возвращает значение, указывающее, проверена ли подлинность пользователя.
        /// </summary>
        /// <remarks>
        /// Это значение равно <c>true</c>, если <see cref="Name"/> не является пустым значением и не равно <c>null</c>.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Возвращает значение, указывающее, имеет ли участник данную роль.
        /// </summary>
        /// <remarks>
        /// Возвращает значение, указывающее, содержится ли указанная роль в списке ролей.
        /// Эта функция учитывает регистр символов.
        /// </remarks>
        /// <param name="role">Имя роли, членство в которой проверяется.</param>
        /// <returns>Возвращает значение, указывающее, имеет ли участник данную роль.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "UserRegistrationService" DomainService.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="UserRegistrationContext"/>.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("MRZS-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="UserRegistrationContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы UserRegistrationService.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="UserRegistrationContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="RegistrationData"/>, загруженных в данный экземпляр <see cref="UserRegistrationContext"/>.
        /// </summary>
        public EntitySet<RegistrationData> RegistrationDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RegistrationData>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="RegistrationData"/> с помощью запроса "GetUsers".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="RegistrationData"/>.</returns>
        public EntityQuery<RegistrationData> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<RegistrationData>("GetUsers", null, false, true);
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "CreateUser" службы DomainService.
        /// </summary>
        /// <param name="user">Значение параметра "user" для данного действия.</param>
        /// <param name="password">Значение параметра "password" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=1)] string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "CreateUser" службы DomainService.
        /// </summary>
        /// <param name="user">Значение параметра "user" для данного действия.</param>
        /// <param name="password">Значение параметра "password" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=1)] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "EditUser" службы DomainService.
        /// </summary>
        /// <param name="user">Значение параметра "user" для данного действия.</param>
        /// <param name="password">Значение параметра "password" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation EditUser(RegistrationData user, [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=1)] string password, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("EditUser", parameters);
            return this.InvokeOperation("EditUser", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "EditUser" службы DomainService.
        /// </summary>
        /// <param name="user">Значение параметра "user" для данного действия.</param>
        /// <param name="password">Значение параметра "password" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation EditUser(RegistrationData user, [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=1)] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("EditUser", parameters);
            return this.InvokeOperation("EditUser", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "UserRegistrationService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "CreateUser".
            /// </summary>
            /// <param name="user">Значение параметра "user" для данного действия.</param>
            /// <param name="password">Значение параметра "password" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginCreateUser".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginCreateUser".</param>
            /// <returns>Объект "CreateUserStatus", возвращенный из операции "CreateUser".</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "EditUser".
            /// </summary>
            /// <param name="user">Значение параметра "user" для данного действия.</param>
            /// <param name="password">Значение параметра "password" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/EditUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/EditUser", ReplyAction="http://tempuri.org/UserRegistrationService/EditUserResponse")]
            IAsyncResult BeginEditUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginEditUser".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginEditUser".</param>
            void EndEditUser(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetUsers".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/GetUsers", ReplyAction="http://tempuri.org/UserRegistrationService/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetUsers".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetUsers".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetUsers".</returns>
            QueryResult<RegistrationData> EndGetUsers(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
                this.CreateEntitySet<RegistrationData>(EntitySetOperations.None);
            }
        }
    }
}
namespace MRZS.Web.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Класс сущности "Answer".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class Answer : Entity
    {
        
        private int _answerId;
        
        private string _answerText;
        
        private bool _isCorrect;
        
        private bool _isCorrectDebug;
        
        private Nullable<bool> _isDeleted;
        
        private int _questionId;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerIdChanging(int value);
        partial void OnAnswerIdChanged();
        partial void OnAnswerTextChanging(string value);
        partial void OnAnswerTextChanged();
        partial void OnIsCorrectChanging(bool value);
        partial void OnIsCorrectChanged();
        partial void OnIsCorrectDebugChanging(bool value);
        partial void OnIsCorrectDebugChanged();
        partial void OnIsDeletedChanging(Nullable<bool> value);
        partial void OnIsDeletedChanged();
        partial void OnQuestionIdChanging(int value);
        partial void OnQuestionIdChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="Answer"/>.
        /// </summary>
        public Answer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "AnswerId".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int AnswerId
        {
            get
            {
                return this._answerId;
            }
            set
            {
                if ((this._answerId != value))
                {
                    this.OnAnswerIdChanging(value);
                    this.ValidateProperty("AnswerId", value);
                    this._answerId = value;
                    this.RaisePropertyChanged("AnswerId");
                    this.OnAnswerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "AnswerText".
        /// </summary>
        [DataMember()]
        [Required()]
        public string AnswerText
        {
            get
            {
                return this._answerText;
            }
            set
            {
                if ((this._answerText != value))
                {
                    this.OnAnswerTextChanging(value);
                    this.RaiseDataMemberChanging("AnswerText");
                    this.ValidateProperty("AnswerText", value);
                    this._answerText = value;
                    this.RaiseDataMemberChanged("AnswerText");
                    this.OnAnswerTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsCorrect".
        /// </summary>
        [DataMember()]
        public bool IsCorrect
        {
            get
            {
                return this._isCorrect;
            }
            set
            {
                if ((this._isCorrect != value))
                {
                    this.OnIsCorrectChanging(value);
                    this.RaiseDataMemberChanging("IsCorrect");
                    this.ValidateProperty("IsCorrect", value);
                    this._isCorrect = value;
                    this.RaiseDataMemberChanged("IsCorrect");
                    this.OnIsCorrectChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsCorrectDebug".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool IsCorrectDebug
        {
            get
            {
                return this._isCorrectDebug;
            }
            set
            {
                if ((this._isCorrectDebug != value))
                {
                    this.OnIsCorrectDebugChanging(value);
                    this.ValidateProperty("IsCorrectDebug", value);
                    this._isCorrectDebug = value;
                    this.RaisePropertyChanged("IsCorrectDebug");
                    this.OnIsCorrectDebugChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsDeleted".
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsDeleted
        {
            get
            {
                return this._isDeleted;
            }
            set
            {
                if ((this._isDeleted != value))
                {
                    this.OnIsDeletedChanging(value);
                    this.RaiseDataMemberChanging("IsDeleted");
                    this.ValidateProperty("IsDeleted", value);
                    this._isDeleted = value;
                    this.RaiseDataMemberChanged("IsDeleted");
                    this.OnIsDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "QuestionId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int QuestionId
        {
            get
            {
                return this._questionId;
            }
            set
            {
                if ((this._questionId != value))
                {
                    this.OnQuestionIdChanging(value);
                    this.RaiseDataMemberChanging("QuestionId");
                    this.ValidateProperty("QuestionId", value);
                    this._questionId = value;
                    this.RaiseDataMemberChanged("QuestionId");
                    this.OnQuestionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._answerId;
        }
    }
    
    /// <summary>
    /// Класс сущности "aspnet_Roles".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class aspnet_Roles : Entity
    {
        
        private Guid _applicationId;
        
        private string _description;
        
        private string _loweredRoleName;
        
        private Guid _roleId;
        
        private string _roleName;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnApplicationIdChanging(Guid value);
        partial void OnApplicationIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnLoweredRoleNameChanging(string value);
        partial void OnLoweredRoleNameChanged();
        partial void OnRoleIdChanging(Guid value);
        partial void OnRoleIdChanged();
        partial void OnRoleNameChanging(string value);
        partial void OnRoleNameChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="aspnet_Roles"/>.
        /// </summary>
        public aspnet_Roles()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ApplicationId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ApplicationId
        {
            get
            {
                return this._applicationId;
            }
            set
            {
                if ((this._applicationId != value))
                {
                    this.OnApplicationIdChanging(value);
                    this.RaiseDataMemberChanging("ApplicationId");
                    this.ValidateProperty("ApplicationId", value);
                    this._applicationId = value;
                    this.RaiseDataMemberChanged("ApplicationId");
                    this.OnApplicationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Description".
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "LoweredRoleName".
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(256)]
        public string LoweredRoleName
        {
            get
            {
                return this._loweredRoleName;
            }
            set
            {
                if ((this._loweredRoleName != value))
                {
                    this.OnLoweredRoleNameChanging(value);
                    this.RaiseDataMemberChanging("LoweredRoleName");
                    this.ValidateProperty("LoweredRoleName", value);
                    this._loweredRoleName = value;
                    this.RaiseDataMemberChanged("LoweredRoleName");
                    this.OnLoweredRoleNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RoleId".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid RoleId
        {
            get
            {
                return this._roleId;
            }
            set
            {
                if ((this._roleId != value))
                {
                    this.OnRoleIdChanging(value);
                    this.ValidateProperty("RoleId", value);
                    this._roleId = value;
                    this.RaisePropertyChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RoleName".
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(256)]
        public string RoleName
        {
            get
            {
                return this._roleName;
            }
            set
            {
                if ((this._roleName != value))
                {
                    this.OnRoleNameChanging(value);
                    this.RaiseDataMemberChanging("RoleName");
                    this.ValidateProperty("RoleName", value);
                    this._roleName = value;
                    this.RaiseDataMemberChanged("RoleName");
                    this.OnRoleNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._roleId;
        }
    }
    
    /// <summary>
    /// Класс сущности "Book".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class Book : Entity
    {
        
        private int _bookId;
        
        private Nullable<bool> _isDeleted;
        
        private string _name;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnBookIdChanging(int value);
        partial void OnBookIdChanged();
        partial void OnIsDeletedChanging(Nullable<bool> value);
        partial void OnIsDeletedChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="Book"/>.
        /// </summary>
        public Book()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "BookId".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int BookId
        {
            get
            {
                return this._bookId;
            }
            set
            {
                if ((this._bookId != value))
                {
                    this.OnBookIdChanging(value);
                    this.ValidateProperty("BookId", value);
                    this._bookId = value;
                    this.RaisePropertyChanged("BookId");
                    this.OnBookIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsDeleted".
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsDeleted
        {
            get
            {
                return this._isDeleted;
            }
            set
            {
                if ((this._isDeleted != value))
                {
                    this.OnIsDeletedChanging(value);
                    this.RaiseDataMemberChanging("IsDeleted");
                    this.ValidateProperty("IsDeleted", value);
                    this._isDeleted = value;
                    this.RaiseDataMemberChanged("IsDeleted");
                    this.OnIsDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Name".
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(250)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._bookId;
        }
    }
    
    /// <summary>
    /// Класс сущности "Defect".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class Defect : Entity
    {
        
        private int _defectId;
        
        private int _interectiveTestId;
        
        private bool _isCorrect;
        
        private string _text;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnDefectIdChanging(int value);
        partial void OnDefectIdChanged();
        partial void OnInterectiveTestIdChanging(int value);
        partial void OnInterectiveTestIdChanged();
        partial void OnIsCorrectChanging(bool value);
        partial void OnIsCorrectChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="Defect"/>.
        /// </summary>
        public Defect()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "DefectId".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int DefectId
        {
            get
            {
                return this._defectId;
            }
            set
            {
                if ((this._defectId != value))
                {
                    this.OnDefectIdChanging(value);
                    this.ValidateProperty("DefectId", value);
                    this._defectId = value;
                    this.RaisePropertyChanged("DefectId");
                    this.OnDefectIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "InterectiveTestId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int InterectiveTestId
        {
            get
            {
                return this._interectiveTestId;
            }
            set
            {
                if ((this._interectiveTestId != value))
                {
                    this.OnInterectiveTestIdChanging(value);
                    this.RaiseDataMemberChanging("InterectiveTestId");
                    this.ValidateProperty("InterectiveTestId", value);
                    this._interectiveTestId = value;
                    this.RaiseDataMemberChanged("InterectiveTestId");
                    this.OnInterectiveTestIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsCorrect".
        /// </summary>
        [DataMember()]
        public bool IsCorrect
        {
            get
            {
                return this._isCorrect;
            }
            set
            {
                if ((this._isCorrect != value))
                {
                    this.OnIsCorrectChanging(value);
                    this.RaiseDataMemberChanging("IsCorrect");
                    this.ValidateProperty("IsCorrect", value);
                    this._isCorrect = value;
                    this.RaiseDataMemberChanged("IsCorrect");
                    this.OnIsCorrectChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Text".
        /// </summary>
        [DataMember()]
        [Required()]
        public string Text
        {
            get
            {
                return this._text;
            }
            set
            {
                if ((this._text != value))
                {
                    this.OnTextChanging(value);
                    this.RaiseDataMemberChanging("Text");
                    this.ValidateProperty("Text", value);
                    this._text = value;
                    this.RaiseDataMemberChanged("Text");
                    this.OnTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._defectId;
        }
    }
    
    /// <summary>
    /// Класс сущности "Group".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class Group : Entity
    {
        
        private int _groupId;
        
        private string _groupName;
        
        private Nullable<bool> _isDeleted;
        
        private int _studentCount;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnGroupIdChanging(int value);
        partial void OnGroupIdChanged();
        partial void OnGroupNameChanging(string value);
        partial void OnGroupNameChanged();
        partial void OnIsDeletedChanging(Nullable<bool> value);
        partial void OnIsDeletedChanged();
        partial void OnStudentCountChanging(int value);
        partial void OnStudentCountChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="Group"/>.
        /// </summary>
        public Group()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GroupId".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int GroupId
        {
            get
            {
                return this._groupId;
            }
            set
            {
                if ((this._groupId != value))
                {
                    this.OnGroupIdChanging(value);
                    this.ValidateProperty("GroupId", value);
                    this._groupId = value;
                    this.RaisePropertyChanged("GroupId");
                    this.OnGroupIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GroupName".
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(250)]
        public string GroupName
        {
            get
            {
                return this._groupName;
            }
            set
            {
                if ((this._groupName != value))
                {
                    this.OnGroupNameChanging(value);
                    this.RaiseDataMemberChanging("GroupName");
                    this.ValidateProperty("GroupName", value);
                    this._groupName = value;
                    this.RaiseDataMemberChanged("GroupName");
                    this.OnGroupNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsDeleted".
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsDeleted
        {
            get
            {
                return this._isDeleted;
            }
            set
            {
                if ((this._isDeleted != value))
                {
                    this.OnIsDeletedChanging(value);
                    this.RaiseDataMemberChanging("IsDeleted");
                    this.ValidateProperty("IsDeleted", value);
                    this._isDeleted = value;
                    this.RaiseDataMemberChanged("IsDeleted");
                    this.OnIsDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "StudentCount".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int StudentCount
        {
            get
            {
                return this._studentCount;
            }
            set
            {
                if ((this._studentCount != value))
                {
                    this.OnStudentCountChanging(value);
                    this.ValidateProperty("StudentCount", value);
                    this._studentCount = value;
                    this.RaisePropertyChanged("StudentCount");
                    this.OnStudentCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._groupId;
        }
    }
    
    /// <summary>
    /// Класс сущности "InterectiveTest".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class InterectiveTest : Entity
    {
        
        private int _interectiveTestId;
        
        private string _message;
        
        private string _parameters;
        
        private string _preparetionMessage;
        
        private string _testInstanceName;
        
        private string _testName;
        
        private string _titleText;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnInterectiveTestIdChanging(int value);
        partial void OnInterectiveTestIdChanged();
        partial void OnMessageChanging(string value);
        partial void OnMessageChanged();
        partial void OnParametersChanging(string value);
        partial void OnParametersChanged();
        partial void OnPreparetionMessageChanging(string value);
        partial void OnPreparetionMessageChanged();
        partial void OnTestInstanceNameChanging(string value);
        partial void OnTestInstanceNameChanged();
        partial void OnTestNameChanging(string value);
        partial void OnTestNameChanged();
        partial void OnTitleTextChanging(string value);
        partial void OnTitleTextChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="InterectiveTest"/>.
        /// </summary>
        public InterectiveTest()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "InterectiveTestId".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int InterectiveTestId
        {
            get
            {
                return this._interectiveTestId;
            }
            set
            {
                if ((this._interectiveTestId != value))
                {
                    this.OnInterectiveTestIdChanging(value);
                    this.ValidateProperty("InterectiveTestId", value);
                    this._interectiveTestId = value;
                    this.RaisePropertyChanged("InterectiveTestId");
                    this.OnInterectiveTestIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Message".
        /// </summary>
        [DataMember()]
        [StringLength(250)]
        public string Message
        {
            get
            {
                return this._message;
            }
            set
            {
                if ((this._message != value))
                {
                    this.OnMessageChanging(value);
                    this.RaiseDataMemberChanging("Message");
                    this.ValidateProperty("Message", value);
                    this._message = value;
                    this.RaiseDataMemberChanged("Message");
                    this.OnMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Parameters".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string Parameters
        {
            get
            {
                return this._parameters;
            }
            set
            {
                if ((this._parameters != value))
                {
                    this.OnParametersChanging(value);
                    this.ValidateProperty("Parameters", value);
                    this._parameters = value;
                    this.RaisePropertyChanged("Parameters");
                    this.OnParametersChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PreparetionMessage".
        /// </summary>
        [DataMember()]
        public string PreparetionMessage
        {
            get
            {
                return this._preparetionMessage;
            }
            set
            {
                if ((this._preparetionMessage != value))
                {
                    this.OnPreparetionMessageChanging(value);
                    this.RaiseDataMemberChanging("PreparetionMessage");
                    this.ValidateProperty("PreparetionMessage", value);
                    this._preparetionMessage = value;
                    this.RaiseDataMemberChanged("PreparetionMessage");
                    this.OnPreparetionMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TestInstanceName".
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(250)]
        public string TestInstanceName
        {
            get
            {
                return this._testInstanceName;
            }
            set
            {
                if ((this._testInstanceName != value))
                {
                    this.OnTestInstanceNameChanging(value);
                    this.RaiseDataMemberChanging("TestInstanceName");
                    this.ValidateProperty("TestInstanceName", value);
                    this._testInstanceName = value;
                    this.RaiseDataMemberChanged("TestInstanceName");
                    this.OnTestInstanceNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TestName".
        /// </summary>
        [DataMember()]
        [StringLength(250)]
        public string TestName
        {
            get
            {
                return this._testName;
            }
            set
            {
                if ((this._testName != value))
                {
                    this.OnTestNameChanging(value);
                    this.RaiseDataMemberChanging("TestName");
                    this.ValidateProperty("TestName", value);
                    this._testName = value;
                    this.RaiseDataMemberChanged("TestName");
                    this.OnTestNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "TitleText".
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string TitleText
        {
            get
            {
                return this._titleText;
            }
            set
            {
                if ((this._titleText != value))
                {
                    this.OnTitleTextChanging(value);
                    this.RaiseDataMemberChanging("TitleText");
                    this.ValidateProperty("TitleText", value);
                    this._titleText = value;
                    this.RaiseDataMemberChanged("TitleText");
                    this.OnTitleTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._interectiveTestId;
        }
    }
    
    /// <summary>
    /// Класс сущности "InterectiveTestLog".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class InterectiveTestLog : Entity
    {
        
        private int _attempts;
        
        private string _bookName;
        
        private Nullable<DateTime> _endTime;
        
        private int _interectiveTestId;
        
        private int _interectiveTestLogId;
        
        private Nullable<int> _sectionId;
        
        private string _sectionName;
        
        private DateTime _startTime;
        
        private int _userId;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnAttemptsChanging(int value);
        partial void OnAttemptsChanged();
        partial void OnBookNameChanging(string value);
        partial void OnBookNameChanged();
        partial void OnEndTimeChanging(Nullable<DateTime> value);
        partial void OnEndTimeChanged();
        partial void OnInterectiveTestIdChanging(int value);
        partial void OnInterectiveTestIdChanged();
        partial void OnInterectiveTestLogIdChanging(int value);
        partial void OnInterectiveTestLogIdChanged();
        partial void OnSectionIdChanging(Nullable<int> value);
        partial void OnSectionIdChanged();
        partial void OnSectionNameChanging(string value);
        partial void OnSectionNameChanged();
        partial void OnStartTimeChanging(DateTime value);
        partial void OnStartTimeChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="InterectiveTestLog"/>.
        /// </summary>
        public InterectiveTestLog()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Attempts".
        /// </summary>
        [DataMember()]
        public int Attempts
        {
            get
            {
                return this._attempts;
            }
            set
            {
                if ((this._attempts != value))
                {
                    this.OnAttemptsChanging(value);
                    this.RaiseDataMemberChanging("Attempts");
                    this.ValidateProperty("Attempts", value);
                    this._attempts = value;
                    this.RaiseDataMemberChanged("Attempts");
                    this.OnAttemptsChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "BookName".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string BookName
        {
            get
            {
                return this._bookName;
            }
            set
            {
                if ((this._bookName != value))
                {
                    this.OnBookNameChanging(value);
                    this.ValidateProperty("BookName", value);
                    this._bookName = value;
                    this.RaisePropertyChanged("BookName");
                    this.OnBookNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "EndTime".
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> EndTime
        {
            get
            {
                return this._endTime;
            }
            set
            {
                if ((this._endTime != value))
                {
                    this.OnEndTimeChanging(value);
                    this.RaiseDataMemberChanging("EndTime");
                    this.ValidateProperty("EndTime", value);
                    this._endTime = value;
                    this.RaiseDataMemberChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "InterectiveTestId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int InterectiveTestId
        {
            get
            {
                return this._interectiveTestId;
            }
            set
            {
                if ((this._interectiveTestId != value))
                {
                    this.OnInterectiveTestIdChanging(value);
                    this.RaiseDataMemberChanging("InterectiveTestId");
                    this.ValidateProperty("InterectiveTestId", value);
                    this._interectiveTestId = value;
                    this.RaiseDataMemberChanged("InterectiveTestId");
                    this.OnInterectiveTestIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "InterectiveTestLogId".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int InterectiveTestLogId
        {
            get
            {
                return this._interectiveTestLogId;
            }
            set
            {
                if ((this._interectiveTestLogId != value))
                {
                    this.OnInterectiveTestLogIdChanging(value);
                    this.ValidateProperty("InterectiveTestLogId", value);
                    this._interectiveTestLogId = value;
                    this.RaisePropertyChanged("InterectiveTestLogId");
                    this.OnInterectiveTestLogIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "SectionId".
        /// </summary>
        [DataMember()]
        public Nullable<int> SectionId
        {
            get
            {
                return this._sectionId;
            }
            set
            {
                if ((this._sectionId != value))
                {
                    this.OnSectionIdChanging(value);
                    this.RaiseDataMemberChanging("SectionId");
                    this.ValidateProperty("SectionId", value);
                    this._sectionId = value;
                    this.RaiseDataMemberChanged("SectionId");
                    this.OnSectionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "SectionName".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string SectionName
        {
            get
            {
                return this._sectionName;
            }
            set
            {
                if ((this._sectionName != value))
                {
                    this.OnSectionNameChanging(value);
                    this.ValidateProperty("SectionName", value);
                    this._sectionName = value;
                    this.RaisePropertyChanged("SectionName");
                    this.OnSectionNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "StartTime".
        /// </summary>
        [DataMember()]
        public DateTime StartTime
        {
            get
            {
                return this._startTime;
            }
            set
            {
                if ((this._startTime != value))
                {
                    this.OnStartTimeChanging(value);
                    this.RaiseDataMemberChanging("StartTime");
                    this.ValidateProperty("StartTime", value);
                    this._startTime = value;
                    this.RaiseDataMemberChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "UserId".
        /// </summary>
        [DataMember()]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._interectiveTestLogId;
        }
    }
    
    /// <summary>
    /// Класс сущности "MultimediaContent".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class MultimediaContent : Entity
    {
        
        private string _contentName;
        
        private Nullable<bool> _isDeleted;
        
        private int _multimediaContentId;
        
        private Nullable<int> _pageId;
        
        private string _path;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnContentNameChanging(string value);
        partial void OnContentNameChanged();
        partial void OnIsDeletedChanging(Nullable<bool> value);
        partial void OnIsDeletedChanged();
        partial void OnMultimediaContentIdChanging(int value);
        partial void OnMultimediaContentIdChanged();
        partial void OnPageIdChanging(Nullable<int> value);
        partial void OnPageIdChanged();
        partial void OnPathChanging(string value);
        partial void OnPathChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="MultimediaContent"/>.
        /// </summary>
        public MultimediaContent()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ContentName".
        /// </summary>
        [DataMember()]
        public string ContentName
        {
            get
            {
                return this._contentName;
            }
            set
            {
                if ((this._contentName != value))
                {
                    this.OnContentNameChanging(value);
                    this.RaiseDataMemberChanging("ContentName");
                    this.ValidateProperty("ContentName", value);
                    this._contentName = value;
                    this.RaiseDataMemberChanged("ContentName");
                    this.OnContentNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsDeleted".
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsDeleted
        {
            get
            {
                return this._isDeleted;
            }
            set
            {
                if ((this._isDeleted != value))
                {
                    this.OnIsDeletedChanging(value);
                    this.RaiseDataMemberChanging("IsDeleted");
                    this.ValidateProperty("IsDeleted", value);
                    this._isDeleted = value;
                    this.RaiseDataMemberChanged("IsDeleted");
                    this.OnIsDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "MultimediaContentId".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int MultimediaContentId
        {
            get
            {
                return this._multimediaContentId;
            }
            set
            {
                if ((this._multimediaContentId != value))
                {
                    this.OnMultimediaContentIdChanging(value);
                    this.ValidateProperty("MultimediaContentId", value);
                    this._multimediaContentId = value;
                    this.RaisePropertyChanged("MultimediaContentId");
                    this.OnMultimediaContentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PageId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> PageId
        {
            get
            {
                return this._pageId;
            }
            set
            {
                if ((this._pageId != value))
                {
                    this.OnPageIdChanging(value);
                    this.RaiseDataMemberChanging("PageId");
                    this.ValidateProperty("PageId", value);
                    this._pageId = value;
                    this.RaiseDataMemberChanged("PageId");
                    this.OnPageIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Path".
        /// </summary>
        [DataMember()]
        public string Path
        {
            get
            {
                return this._path;
            }
            set
            {
                if ((this._path != value))
                {
                    this.OnPathChanging(value);
                    this.RaiseDataMemberChanging("Path");
                    this.ValidateProperty("Path", value);
                    this._path = value;
                    this.RaiseDataMemberChanged("Path");
                    this.OnPathChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._multimediaContentId;
        }
    }
    
    /// <summary>
    /// Класс сущности "Page".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class Page : Entity
    {
        
        private Nullable<bool> _isDeleted;
        
        private Nullable<bool> _isLastPage;
        
        private string _pageContent;
        
        private int _pageId;
        
        private Nullable<int> _pageOrder;
        
        private string _pagePath;
        
        private int _sectionId;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnIsDeletedChanging(Nullable<bool> value);
        partial void OnIsDeletedChanged();
        partial void OnIsLastPageChanging(Nullable<bool> value);
        partial void OnIsLastPageChanged();
        partial void OnPageContentChanging(string value);
        partial void OnPageContentChanged();
        partial void OnPageIdChanging(int value);
        partial void OnPageIdChanged();
        partial void OnPageOrderChanging(Nullable<int> value);
        partial void OnPageOrderChanged();
        partial void OnPagePathChanging(string value);
        partial void OnPagePathChanged();
        partial void OnSectionIdChanging(int value);
        partial void OnSectionIdChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="Page"/>.
        /// </summary>
        public Page()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsDeleted".
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsDeleted
        {
            get
            {
                return this._isDeleted;
            }
            set
            {
                if ((this._isDeleted != value))
                {
                    this.OnIsDeletedChanging(value);
                    this.RaiseDataMemberChanging("IsDeleted");
                    this.ValidateProperty("IsDeleted", value);
                    this._isDeleted = value;
                    this.RaiseDataMemberChanged("IsDeleted");
                    this.OnIsDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsLastPage".
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsLastPage
        {
            get
            {
                return this._isLastPage;
            }
            set
            {
                if ((this._isLastPage != value))
                {
                    this.OnIsLastPageChanging(value);
                    this.RaiseDataMemberChanging("IsLastPage");
                    this.ValidateProperty("IsLastPage", value);
                    this._isLastPage = value;
                    this.RaiseDataMemberChanged("IsLastPage");
                    this.OnIsLastPageChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PageContent".
        /// </summary>
        [DataMember()]
        public string PageContent
        {
            get
            {
                return this._pageContent;
            }
            set
            {
                if ((this._pageContent != value))
                {
                    this.OnPageContentChanging(value);
                    this.RaiseDataMemberChanging("PageContent");
                    this.ValidateProperty("PageContent", value);
                    this._pageContent = value;
                    this.RaiseDataMemberChanged("PageContent");
                    this.OnPageContentChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PageId".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PageId
        {
            get
            {
                return this._pageId;
            }
            set
            {
                if ((this._pageId != value))
                {
                    this.OnPageIdChanging(value);
                    this.ValidateProperty("PageId", value);
                    this._pageId = value;
                    this.RaisePropertyChanged("PageId");
                    this.OnPageIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PageOrder".
        /// </summary>
        [DataMember()]
        public Nullable<int> PageOrder
        {
            get
            {
                return this._pageOrder;
            }
            set
            {
                if ((this._pageOrder != value))
                {
                    this.OnPageOrderChanging(value);
                    this.RaiseDataMemberChanging("PageOrder");
                    this.ValidateProperty("PageOrder", value);
                    this._pageOrder = value;
                    this.RaiseDataMemberChanged("PageOrder");
                    this.OnPageOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "PagePath".
        /// </summary>
        [DataMember()]
        public string PagePath
        {
            get
            {
                return this._pagePath;
            }
            set
            {
                if ((this._pagePath != value))
                {
                    this.OnPagePathChanging(value);
                    this.RaiseDataMemberChanging("PagePath");
                    this.ValidateProperty("PagePath", value);
                    this._pagePath = value;
                    this.RaiseDataMemberChanged("PagePath");
                    this.OnPagePathChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "SectionId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int SectionId
        {
            get
            {
                return this._sectionId;
            }
            set
            {
                if ((this._sectionId != value))
                {
                    this.OnSectionIdChanging(value);
                    this.RaiseDataMemberChanging("SectionId");
                    this.ValidateProperty("SectionId", value);
                    this._sectionId = value;
                    this.RaiseDataMemberChanged("SectionId");
                    this.OnSectionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._pageId;
        }
    }
    
    /// <summary>
    /// Класс сущности "Question".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class Question : Entity
    {
        
        private Nullable<int> _difficulty;
        
        private Nullable<bool> _isDeleted;
        
        private int _questionId;
        
        private int _quizId;
        
        private string _text;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnDifficultyChanging(Nullable<int> value);
        partial void OnDifficultyChanged();
        partial void OnIsDeletedChanging(Nullable<bool> value);
        partial void OnIsDeletedChanged();
        partial void OnQuestionIdChanging(int value);
        partial void OnQuestionIdChanged();
        partial void OnQuizIdChanging(int value);
        partial void OnQuizIdChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="Question"/>.
        /// </summary>
        public Question()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Difficulty".
        /// </summary>
        [DataMember()]
        public Nullable<int> Difficulty
        {
            get
            {
                return this._difficulty;
            }
            set
            {
                if ((this._difficulty != value))
                {
                    this.OnDifficultyChanging(value);
                    this.RaiseDataMemberChanging("Difficulty");
                    this.ValidateProperty("Difficulty", value);
                    this._difficulty = value;
                    this.RaiseDataMemberChanged("Difficulty");
                    this.OnDifficultyChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsDeleted".
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsDeleted
        {
            get
            {
                return this._isDeleted;
            }
            set
            {
                if ((this._isDeleted != value))
                {
                    this.OnIsDeletedChanging(value);
                    this.RaiseDataMemberChanging("IsDeleted");
                    this.ValidateProperty("IsDeleted", value);
                    this._isDeleted = value;
                    this.RaiseDataMemberChanged("IsDeleted");
                    this.OnIsDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "QuestionId".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int QuestionId
        {
            get
            {
                return this._questionId;
            }
            set
            {
                if ((this._questionId != value))
                {
                    this.OnQuestionIdChanging(value);
                    this.ValidateProperty("QuestionId", value);
                    this._questionId = value;
                    this.RaisePropertyChanged("QuestionId");
                    this.OnQuestionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "QuizId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int QuizId
        {
            get
            {
                return this._quizId;
            }
            set
            {
                if ((this._quizId != value))
                {
                    this.OnQuizIdChanging(value);
                    this.RaiseDataMemberChanging("QuizId");
                    this.ValidateProperty("QuizId", value);
                    this._quizId = value;
                    this.RaiseDataMemberChanged("QuizId");
                    this.OnQuizIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Text".
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string Text
        {
            get
            {
                return this._text;
            }
            set
            {
                if ((this._text != value))
                {
                    this.OnTextChanging(value);
                    this.RaiseDataMemberChanging("Text");
                    this.ValidateProperty("Text", value);
                    this._text = value;
                    this.RaiseDataMemberChanged("Text");
                    this.OnTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._questionId;
        }
    }
    
    /// <summary>
    /// Класс сущности "QuestionLog".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class QuestionLog : Entity
    {
        
        private int _id;
        
        private bool _isCorrect;
        
        private string _questionText;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIsCorrectChanging(bool value);
        partial void OnIsCorrectChanged();
        partial void OnQuestionTextChanging(string value);
        partial void OnQuestionTextChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="QuestionLog"/>.
        /// </summary>
        public QuestionLog()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Id".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsCorrect".
        /// </summary>
        [DataMember()]
        public bool IsCorrect
        {
            get
            {
                return this._isCorrect;
            }
            set
            {
                if ((this._isCorrect != value))
                {
                    this.OnIsCorrectChanging(value);
                    this.RaiseDataMemberChanging("IsCorrect");
                    this.ValidateProperty("IsCorrect", value);
                    this._isCorrect = value;
                    this.RaiseDataMemberChanged("IsCorrect");
                    this.OnIsCorrectChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "QuestionText".
        /// </summary>
        [DataMember()]
        public string QuestionText
        {
            get
            {
                return this._questionText;
            }
            set
            {
                if ((this._questionText != value))
                {
                    this.OnQuestionTextChanging(value);
                    this.RaiseDataMemberChanging("QuestionText");
                    this.ValidateProperty("QuestionText", value);
                    this._questionText = value;
                    this.RaiseDataMemberChanged("QuestionText");
                    this.OnQuestionTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Класс сущности "Quiz".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class Quiz : Entity
    {
        
        private Nullable<int> _hardDifficulty;
        
        private Nullable<bool> _isDeleted;
        
        private Nullable<int> _mediumDifficulty;
        
        private int _questionsCount;
        
        private int _quizId;
        
        private string _quizName;
        
        private Nullable<int> _sectionId;
        
        private Nullable<int> _simpleDifficulty;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnHardDifficultyChanging(Nullable<int> value);
        partial void OnHardDifficultyChanged();
        partial void OnIsDeletedChanging(Nullable<bool> value);
        partial void OnIsDeletedChanged();
        partial void OnMediumDifficultyChanging(Nullable<int> value);
        partial void OnMediumDifficultyChanged();
        partial void OnQuestionsCountChanging(int value);
        partial void OnQuestionsCountChanged();
        partial void OnQuizIdChanging(int value);
        partial void OnQuizIdChanged();
        partial void OnQuizNameChanging(string value);
        partial void OnQuizNameChanged();
        partial void OnSectionIdChanging(Nullable<int> value);
        partial void OnSectionIdChanged();
        partial void OnSimpleDifficultyChanging(Nullable<int> value);
        partial void OnSimpleDifficultyChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="Quiz"/>.
        /// </summary>
        public Quiz()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "HardDifficulty".
        /// </summary>
        [DataMember()]
        public Nullable<int> HardDifficulty
        {
            get
            {
                return this._hardDifficulty;
            }
            set
            {
                if ((this._hardDifficulty != value))
                {
                    this.OnHardDifficultyChanging(value);
                    this.RaiseDataMemberChanging("HardDifficulty");
                    this.ValidateProperty("HardDifficulty", value);
                    this._hardDifficulty = value;
                    this.RaiseDataMemberChanged("HardDifficulty");
                    this.OnHardDifficultyChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsDeleted".
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsDeleted
        {
            get
            {
                return this._isDeleted;
            }
            set
            {
                if ((this._isDeleted != value))
                {
                    this.OnIsDeletedChanging(value);
                    this.RaiseDataMemberChanging("IsDeleted");
                    this.ValidateProperty("IsDeleted", value);
                    this._isDeleted = value;
                    this.RaiseDataMemberChanged("IsDeleted");
                    this.OnIsDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "MediumDifficulty".
        /// </summary>
        [DataMember()]
        public Nullable<int> MediumDifficulty
        {
            get
            {
                return this._mediumDifficulty;
            }
            set
            {
                if ((this._mediumDifficulty != value))
                {
                    this.OnMediumDifficultyChanging(value);
                    this.RaiseDataMemberChanging("MediumDifficulty");
                    this.ValidateProperty("MediumDifficulty", value);
                    this._mediumDifficulty = value;
                    this.RaiseDataMemberChanged("MediumDifficulty");
                    this.OnMediumDifficultyChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "QuestionsCount".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int QuestionsCount
        {
            get
            {
                return this._questionsCount;
            }
            set
            {
                if ((this._questionsCount != value))
                {
                    this.OnQuestionsCountChanging(value);
                    this.ValidateProperty("QuestionsCount", value);
                    this._questionsCount = value;
                    this.RaisePropertyChanged("QuestionsCount");
                    this.OnQuestionsCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "QuizId".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int QuizId
        {
            get
            {
                return this._quizId;
            }
            set
            {
                if ((this._quizId != value))
                {
                    this.OnQuizIdChanging(value);
                    this.ValidateProperty("QuizId", value);
                    this._quizId = value;
                    this.RaisePropertyChanged("QuizId");
                    this.OnQuizIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "QuizName".
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string QuizName
        {
            get
            {
                return this._quizName;
            }
            set
            {
                if ((this._quizName != value))
                {
                    this.OnQuizNameChanging(value);
                    this.RaiseDataMemberChanging("QuizName");
                    this.ValidateProperty("QuizName", value);
                    this._quizName = value;
                    this.RaiseDataMemberChanged("QuizName");
                    this.OnQuizNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "SectionId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> SectionId
        {
            get
            {
                return this._sectionId;
            }
            set
            {
                if ((this._sectionId != value))
                {
                    this.OnSectionIdChanging(value);
                    this.RaiseDataMemberChanging("SectionId");
                    this.ValidateProperty("SectionId", value);
                    this._sectionId = value;
                    this.RaiseDataMemberChanged("SectionId");
                    this.OnSectionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "SimpleDifficulty".
        /// </summary>
        [DataMember()]
        public Nullable<int> SimpleDifficulty
        {
            get
            {
                return this._simpleDifficulty;
            }
            set
            {
                if ((this._simpleDifficulty != value))
                {
                    this.OnSimpleDifficultyChanging(value);
                    this.RaiseDataMemberChanging("SimpleDifficulty");
                    this.ValidateProperty("SimpleDifficulty", value);
                    this._simpleDifficulty = value;
                    this.RaiseDataMemberChanged("SimpleDifficulty");
                    this.OnSimpleDifficultyChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._quizId;
        }
    }
    
    /// <summary>
    /// Класс сущности "QuizLogDTO".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class QuizLogDTO : Entity
    {
        
        private string _bookName;
        
        private string _correctAnswersString;
        
        private string _durationString;
        
        private int _entityId;
        
        private Guid _id;
        
        private int _quizId;
        
        private string _sectionName;
        
        private DateTime _startTime;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnBookNameChanging(string value);
        partial void OnBookNameChanged();
        partial void OnCorrectAnswersStringChanging(string value);
        partial void OnCorrectAnswersStringChanged();
        partial void OnDurationStringChanging(string value);
        partial void OnDurationStringChanged();
        partial void OnEntityIdChanging(int value);
        partial void OnEntityIdChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnQuizIdChanging(int value);
        partial void OnQuizIdChanged();
        partial void OnSectionNameChanging(string value);
        partial void OnSectionNameChanged();
        partial void OnStartTimeChanging(DateTime value);
        partial void OnStartTimeChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="QuizLogDTO"/>.
        /// </summary>
        public QuizLogDTO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "BookName".
        /// </summary>
        [DataMember()]
        public string BookName
        {
            get
            {
                return this._bookName;
            }
            set
            {
                if ((this._bookName != value))
                {
                    this.OnBookNameChanging(value);
                    this.RaiseDataMemberChanging("BookName");
                    this.ValidateProperty("BookName", value);
                    this._bookName = value;
                    this.RaiseDataMemberChanged("BookName");
                    this.OnBookNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "CorrectAnswersString".
        /// </summary>
        [DataMember()]
        public string CorrectAnswersString
        {
            get
            {
                return this._correctAnswersString;
            }
            set
            {
                if ((this._correctAnswersString != value))
                {
                    this.OnCorrectAnswersStringChanging(value);
                    this.RaiseDataMemberChanging("CorrectAnswersString");
                    this.ValidateProperty("CorrectAnswersString", value);
                    this._correctAnswersString = value;
                    this.RaiseDataMemberChanged("CorrectAnswersString");
                    this.OnCorrectAnswersStringChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "DurationString".
        /// </summary>
        [DataMember()]
        public string DurationString
        {
            get
            {
                return this._durationString;
            }
            set
            {
                if ((this._durationString != value))
                {
                    this.OnDurationStringChanging(value);
                    this.RaiseDataMemberChanging("DurationString");
                    this.ValidateProperty("DurationString", value);
                    this._durationString = value;
                    this.RaiseDataMemberChanged("DurationString");
                    this.OnDurationStringChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "EntityId".
        /// </summary>
        [DataMember()]
        public int EntityId
        {
            get
            {
                return this._entityId;
            }
            set
            {
                if ((this._entityId != value))
                {
                    this.OnEntityIdChanging(value);
                    this.RaiseDataMemberChanging("EntityId");
                    this.ValidateProperty("EntityId", value);
                    this._entityId = value;
                    this.RaiseDataMemberChanged("EntityId");
                    this.OnEntityIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Id".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "QuizId".
        /// </summary>
        [DataMember()]
        public int QuizId
        {
            get
            {
                return this._quizId;
            }
            set
            {
                if ((this._quizId != value))
                {
                    this.OnQuizIdChanging(value);
                    this.RaiseDataMemberChanging("QuizId");
                    this.ValidateProperty("QuizId", value);
                    this._quizId = value;
                    this.RaiseDataMemberChanged("QuizId");
                    this.OnQuizIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "SectionName".
        /// </summary>
        [DataMember()]
        public string SectionName
        {
            get
            {
                return this._sectionName;
            }
            set
            {
                if ((this._sectionName != value))
                {
                    this.OnSectionNameChanging(value);
                    this.RaiseDataMemberChanging("SectionName");
                    this.ValidateProperty("SectionName", value);
                    this._sectionName = value;
                    this.RaiseDataMemberChanged("SectionName");
                    this.OnSectionNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "StartTime".
        /// </summary>
        [DataMember()]
        public DateTime StartTime
        {
            get
            {
                return this._startTime;
            }
            set
            {
                if ((this._startTime != value))
                {
                    this.OnStartTimeChanging(value);
                    this.RaiseDataMemberChanging("StartTime");
                    this.ValidateProperty("StartTime", value);
                    this._startTime = value;
                    this.RaiseDataMemberChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// Класс сущности "QuizResult".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class QuizResult : Entity
    {
        
        private string _bookName;
        
        private decimal _correctAnswers;
        
        private TimeSpan _duration;
        
        private string _durationString;
        
        private Nullable<DateTime> _endTime;
        
        private int _quizId;
        
        private int _quizResultId;
        
        private string _sectionName;
        
        private DateTime _startTime;
        
        private int _userId;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnBookNameChanging(string value);
        partial void OnBookNameChanged();
        partial void OnCorrectAnswersChanging(decimal value);
        partial void OnCorrectAnswersChanged();
        partial void OnDurationChanging(TimeSpan value);
        partial void OnDurationChanged();
        partial void OnDurationStringChanging(string value);
        partial void OnDurationStringChanged();
        partial void OnEndTimeChanging(Nullable<DateTime> value);
        partial void OnEndTimeChanged();
        partial void OnQuizIdChanging(int value);
        partial void OnQuizIdChanged();
        partial void OnQuizResultIdChanging(int value);
        partial void OnQuizResultIdChanged();
        partial void OnSectionNameChanging(string value);
        partial void OnSectionNameChanged();
        partial void OnStartTimeChanging(DateTime value);
        partial void OnStartTimeChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="QuizResult"/>.
        /// </summary>
        public QuizResult()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "BookName".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string BookName
        {
            get
            {
                return this._bookName;
            }
            set
            {
                if ((this._bookName != value))
                {
                    this.OnBookNameChanging(value);
                    this.ValidateProperty("BookName", value);
                    this._bookName = value;
                    this.RaisePropertyChanged("BookName");
                    this.OnBookNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "CorrectAnswers".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public decimal CorrectAnswers
        {
            get
            {
                return this._correctAnswers;
            }
            set
            {
                if ((this._correctAnswers != value))
                {
                    this.OnCorrectAnswersChanging(value);
                    this.ValidateProperty("CorrectAnswers", value);
                    this._correctAnswers = value;
                    this.RaisePropertyChanged("CorrectAnswers");
                    this.OnCorrectAnswersChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Duration".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public TimeSpan Duration
        {
            get
            {
                return this._duration;
            }
            set
            {
                if ((this._duration != value))
                {
                    this.OnDurationChanging(value);
                    this.ValidateProperty("Duration", value);
                    this._duration = value;
                    this.RaisePropertyChanged("Duration");
                    this.OnDurationChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "DurationString".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string DurationString
        {
            get
            {
                return this._durationString;
            }
            set
            {
                if ((this._durationString != value))
                {
                    this.OnDurationStringChanging(value);
                    this.ValidateProperty("DurationString", value);
                    this._durationString = value;
                    this.RaisePropertyChanged("DurationString");
                    this.OnDurationStringChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "EndTime".
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> EndTime
        {
            get
            {
                return this._endTime;
            }
            set
            {
                if ((this._endTime != value))
                {
                    this.OnEndTimeChanging(value);
                    this.RaiseDataMemberChanging("EndTime");
                    this.ValidateProperty("EndTime", value);
                    this._endTime = value;
                    this.RaiseDataMemberChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "QuizId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int QuizId
        {
            get
            {
                return this._quizId;
            }
            set
            {
                if ((this._quizId != value))
                {
                    this.OnQuizIdChanging(value);
                    this.RaiseDataMemberChanging("QuizId");
                    this.ValidateProperty("QuizId", value);
                    this._quizId = value;
                    this.RaiseDataMemberChanged("QuizId");
                    this.OnQuizIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "QuizResultId".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int QuizResultId
        {
            get
            {
                return this._quizResultId;
            }
            set
            {
                if ((this._quizResultId != value))
                {
                    this.OnQuizResultIdChanging(value);
                    this.ValidateProperty("QuizResultId", value);
                    this._quizResultId = value;
                    this.RaisePropertyChanged("QuizResultId");
                    this.OnQuizResultIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "SectionName".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string SectionName
        {
            get
            {
                return this._sectionName;
            }
            set
            {
                if ((this._sectionName != value))
                {
                    this.OnSectionNameChanging(value);
                    this.ValidateProperty("SectionName", value);
                    this._sectionName = value;
                    this.RaisePropertyChanged("SectionName");
                    this.OnSectionNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "StartTime".
        /// </summary>
        [DataMember()]
        public DateTime StartTime
        {
            get
            {
                return this._startTime;
            }
            set
            {
                if ((this._startTime != value))
                {
                    this.OnStartTimeChanging(value);
                    this.RaiseDataMemberChanging("StartTime");
                    this.ValidateProperty("StartTime", value);
                    this._startTime = value;
                    this.RaiseDataMemberChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "UserId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._quizResultId;
        }
    }
    
    /// <summary>
    /// Класс сущности "Repairman".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class Repairman : Entity
    {
        
        private int _defectId;
        
        private bool _isCorrect;
        
        private int _repeirmenId;
        
        private string _text;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnDefectIdChanging(int value);
        partial void OnDefectIdChanged();
        partial void OnIsCorrectChanging(bool value);
        partial void OnIsCorrectChanged();
        partial void OnRepeirmenIdChanging(int value);
        partial void OnRepeirmenIdChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="Repairman"/>.
        /// </summary>
        public Repairman()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "DefectId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DefectId
        {
            get
            {
                return this._defectId;
            }
            set
            {
                if ((this._defectId != value))
                {
                    this.OnDefectIdChanging(value);
                    this.RaiseDataMemberChanging("DefectId");
                    this.ValidateProperty("DefectId", value);
                    this._defectId = value;
                    this.RaiseDataMemberChanged("DefectId");
                    this.OnDefectIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsCorrect".
        /// </summary>
        [DataMember()]
        public bool IsCorrect
        {
            get
            {
                return this._isCorrect;
            }
            set
            {
                if ((this._isCorrect != value))
                {
                    this.OnIsCorrectChanging(value);
                    this.RaiseDataMemberChanging("IsCorrect");
                    this.ValidateProperty("IsCorrect", value);
                    this._isCorrect = value;
                    this.RaiseDataMemberChanged("IsCorrect");
                    this.OnIsCorrectChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "RepeirmenId".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int RepeirmenId
        {
            get
            {
                return this._repeirmenId;
            }
            set
            {
                if ((this._repeirmenId != value))
                {
                    this.OnRepeirmenIdChanging(value);
                    this.ValidateProperty("RepeirmenId", value);
                    this._repeirmenId = value;
                    this.RaisePropertyChanged("RepeirmenId");
                    this.OnRepeirmenIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Text".
        /// </summary>
        [DataMember()]
        [Required()]
        public string Text
        {
            get
            {
                return this._text;
            }
            set
            {
                if ((this._text != value))
                {
                    this.OnTextChanging(value);
                    this.RaiseDataMemberChanging("Text");
                    this.ValidateProperty("Text", value);
                    this._text = value;
                    this.RaiseDataMemberChanged("Text");
                    this.OnTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._repeirmenId;
        }
    }
    
    /// <summary>
    /// Класс сущности "ResultAnswer".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class ResultAnswer : Entity
    {
        
        private Nullable<int> _answerId;
        
        private Nullable<DateTime> _answerTime;
        
        private int _questionId;
        
        private Nullable<int> _quizResultId;
        
        private int _resultAnswerId;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerIdChanging(Nullable<int> value);
        partial void OnAnswerIdChanged();
        partial void OnAnswerTimeChanging(Nullable<DateTime> value);
        partial void OnAnswerTimeChanged();
        partial void OnQuestionIdChanging(int value);
        partial void OnQuestionIdChanged();
        partial void OnQuizResultIdChanging(Nullable<int> value);
        partial void OnQuizResultIdChanged();
        partial void OnResultAnswerIdChanging(int value);
        partial void OnResultAnswerIdChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="ResultAnswer"/>.
        /// </summary>
        public ResultAnswer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "AnswerId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> AnswerId
        {
            get
            {
                return this._answerId;
            }
            set
            {
                if ((this._answerId != value))
                {
                    this.OnAnswerIdChanging(value);
                    this.RaiseDataMemberChanging("AnswerId");
                    this.ValidateProperty("AnswerId", value);
                    this._answerId = value;
                    this.RaiseDataMemberChanged("AnswerId");
                    this.OnAnswerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "AnswerTime".
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> AnswerTime
        {
            get
            {
                return this._answerTime;
            }
            set
            {
                if ((this._answerTime != value))
                {
                    this.OnAnswerTimeChanging(value);
                    this.RaiseDataMemberChanging("AnswerTime");
                    this.ValidateProperty("AnswerTime", value);
                    this._answerTime = value;
                    this.RaiseDataMemberChanged("AnswerTime");
                    this.OnAnswerTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "QuestionId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int QuestionId
        {
            get
            {
                return this._questionId;
            }
            set
            {
                if ((this._questionId != value))
                {
                    this.OnQuestionIdChanging(value);
                    this.RaiseDataMemberChanging("QuestionId");
                    this.ValidateProperty("QuestionId", value);
                    this._questionId = value;
                    this.RaiseDataMemberChanged("QuestionId");
                    this.OnQuestionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "QuizResultId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> QuizResultId
        {
            get
            {
                return this._quizResultId;
            }
            set
            {
                if ((this._quizResultId != value))
                {
                    this.OnQuizResultIdChanging(value);
                    this.RaiseDataMemberChanging("QuizResultId");
                    this.ValidateProperty("QuizResultId", value);
                    this._quizResultId = value;
                    this.RaiseDataMemberChanged("QuizResultId");
                    this.OnQuizResultIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "ResultAnswerId".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ResultAnswerId
        {
            get
            {
                return this._resultAnswerId;
            }
            set
            {
                if ((this._resultAnswerId != value))
                {
                    this.OnResultAnswerIdChanging(value);
                    this.ValidateProperty("ResultAnswerId", value);
                    this._resultAnswerId = value;
                    this.RaisePropertyChanged("ResultAnswerId");
                    this.OnResultAnswerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._resultAnswerId;
        }
    }
    
    /// <summary>
    /// Класс сущности "Section".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class Section : Entity
    {
        
        private int _bookId;
        
        private string _bookName;
        
        private bool _isCurrent;
        
        private Nullable<bool> _isDeleted;
        
        private string _name;
        
        private int _sectionId;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnBookIdChanging(int value);
        partial void OnBookIdChanged();
        partial void OnBookNameChanging(string value);
        partial void OnBookNameChanged();
        partial void OnIsCurrentChanging(bool value);
        partial void OnIsCurrentChanged();
        partial void OnIsDeletedChanging(Nullable<bool> value);
        partial void OnIsDeletedChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnSectionIdChanging(int value);
        partial void OnSectionIdChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="Section"/>.
        /// </summary>
        public Section()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "BookId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int BookId
        {
            get
            {
                return this._bookId;
            }
            set
            {
                if ((this._bookId != value))
                {
                    this.OnBookIdChanging(value);
                    this.RaiseDataMemberChanging("BookId");
                    this.ValidateProperty("BookId", value);
                    this._bookId = value;
                    this.RaiseDataMemberChanged("BookId");
                    this.OnBookIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "BookName".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string BookName
        {
            get
            {
                return this._bookName;
            }
            set
            {
                if ((this._bookName != value))
                {
                    this.OnBookNameChanging(value);
                    this.ValidateProperty("BookName", value);
                    this._bookName = value;
                    this.RaisePropertyChanged("BookName");
                    this.OnBookNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsCurrent".
        /// </summary>
        [DataMember()]
        public bool IsCurrent
        {
            get
            {
                return this._isCurrent;
            }
            set
            {
                if ((this._isCurrent != value))
                {
                    this.OnIsCurrentChanging(value);
                    this.RaiseDataMemberChanging("IsCurrent");
                    this.ValidateProperty("IsCurrent", value);
                    this._isCurrent = value;
                    this.RaiseDataMemberChanged("IsCurrent");
                    this.OnIsCurrentChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsDeleted".
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsDeleted
        {
            get
            {
                return this._isDeleted;
            }
            set
            {
                if ((this._isDeleted != value))
                {
                    this.OnIsDeletedChanging(value);
                    this.RaiseDataMemberChanging("IsDeleted");
                    this.ValidateProperty("IsDeleted", value);
                    this._isDeleted = value;
                    this.RaiseDataMemberChanged("IsDeleted");
                    this.OnIsDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Name".
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(250)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "SectionId".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int SectionId
        {
            get
            {
                return this._sectionId;
            }
            set
            {
                if ((this._sectionId != value))
                {
                    this.OnSectionIdChanging(value);
                    this.ValidateProperty("SectionId", value);
                    this._sectionId = value;
                    this.RaisePropertyChanged("SectionId");
                    this.OnSectionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._sectionId;
        }
    }
    
    /// <summary>
    /// Класс сущности "User".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class User : Entity
    {
        
        private Guid _aspnet_UserId;
        
        private string _currentBook;
        
        private string _currentSection;
        
        private string _firstName;
        
        private string _fullName;
        
        private Nullable<int> _groupId;
        
        private string _groupName;
        
        private Nullable<bool> _isDeleted;
        
        private Nullable<DateTime> _lastActivityDate;
        
        private string _lastName;
        
        private int _userId;
        
        private string _userLogin;
        
        private string _userRole;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void Onaspnet_UserIdChanging(Guid value);
        partial void Onaspnet_UserIdChanged();
        partial void OnCurrentBookChanging(string value);
        partial void OnCurrentBookChanged();
        partial void OnCurrentSectionChanging(string value);
        partial void OnCurrentSectionChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnGroupIdChanging(Nullable<int> value);
        partial void OnGroupIdChanged();
        partial void OnGroupNameChanging(string value);
        partial void OnGroupNameChanged();
        partial void OnIsDeletedChanging(Nullable<bool> value);
        partial void OnIsDeletedChanged();
        partial void OnLastActivityDateChanging(Nullable<DateTime> value);
        partial void OnLastActivityDateChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnUserLoginChanging(string value);
        partial void OnUserLoginChanged();
        partial void OnUserRoleChanging(string value);
        partial void OnUserRoleChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="User"/>.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "aspnet_UserId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid aspnet_UserId
        {
            get
            {
                return this._aspnet_UserId;
            }
            set
            {
                if ((this._aspnet_UserId != value))
                {
                    this.Onaspnet_UserIdChanging(value);
                    this.RaiseDataMemberChanging("aspnet_UserId");
                    this.ValidateProperty("aspnet_UserId", value);
                    this._aspnet_UserId = value;
                    this.RaiseDataMemberChanged("aspnet_UserId");
                    this.Onaspnet_UserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "CurrentBook".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string CurrentBook
        {
            get
            {
                return this._currentBook;
            }
            set
            {
                if ((this._currentBook != value))
                {
                    this.OnCurrentBookChanging(value);
                    this.ValidateProperty("CurrentBook", value);
                    this._currentBook = value;
                    this.RaisePropertyChanged("CurrentBook");
                    this.OnCurrentBookChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "CurrentSection".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string CurrentSection
        {
            get
            {
                return this._currentSection;
            }
            set
            {
                if ((this._currentSection != value))
                {
                    this.OnCurrentSectionChanging(value);
                    this.ValidateProperty("CurrentSection", value);
                    this._currentSection = value;
                    this.RaisePropertyChanged("CurrentSection");
                    this.OnCurrentSectionChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "FirstName".
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "FullName".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string FullName
        {
            get
            {
                return this._fullName;
            }
            set
            {
                if ((this._fullName != value))
                {
                    this.OnFullNameChanging(value);
                    this.ValidateProperty("FullName", value);
                    this._fullName = value;
                    this.RaisePropertyChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GroupId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> GroupId
        {
            get
            {
                return this._groupId;
            }
            set
            {
                if ((this._groupId != value))
                {
                    this.OnGroupIdChanging(value);
                    this.RaiseDataMemberChanging("GroupId");
                    this.ValidateProperty("GroupId", value);
                    this._groupId = value;
                    this.RaiseDataMemberChanged("GroupId");
                    this.OnGroupIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GroupName".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string GroupName
        {
            get
            {
                return this._groupName;
            }
            set
            {
                if ((this._groupName != value))
                {
                    this.OnGroupNameChanging(value);
                    this.ValidateProperty("GroupName", value);
                    this._groupName = value;
                    this.RaisePropertyChanged("GroupName");
                    this.OnGroupNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsDeleted".
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsDeleted
        {
            get
            {
                return this._isDeleted;
            }
            set
            {
                if ((this._isDeleted != value))
                {
                    this.OnIsDeletedChanging(value);
                    this.RaiseDataMemberChanging("IsDeleted");
                    this.ValidateProperty("IsDeleted", value);
                    this._isDeleted = value;
                    this.RaiseDataMemberChanged("IsDeleted");
                    this.OnIsDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "LastActivityDate".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public Nullable<DateTime> LastActivityDate
        {
            get
            {
                return this._lastActivityDate;
            }
            set
            {
                if ((this._lastActivityDate != value))
                {
                    this.OnLastActivityDateChanging(value);
                    this.ValidateProperty("LastActivityDate", value);
                    this._lastActivityDate = value;
                    this.RaisePropertyChanged("LastActivityDate");
                    this.OnLastActivityDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "LastName".
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.RaiseDataMemberChanging("LastName");
                    this.ValidateProperty("LastName", value);
                    this._lastName = value;
                    this.RaiseDataMemberChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "UserId".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaisePropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "UserLogin".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string UserLogin
        {
            get
            {
                return this._userLogin;
            }
            set
            {
                if ((this._userLogin != value))
                {
                    this.OnUserLoginChanging(value);
                    this.ValidateProperty("UserLogin", value);
                    this._userLogin = value;
                    this.RaisePropertyChanged("UserLogin");
                    this.OnUserLoginChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "UserRole".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string UserRole
        {
            get
            {
                return this._userRole;
            }
            set
            {
                if ((this._userRole != value))
                {
                    this.OnUserRoleChanging(value);
                    this.ValidateProperty("UserRole", value);
                    this._userRole = value;
                    this.RaisePropertyChanged("UserRole");
                    this.OnUserRoleChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._userId;
        }
    }
    
    /// <summary>
    /// Класс сущности "UserSection".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MRZS.Web.Models")]
    public sealed partial class UserSection : Entity
    {
        
        private Nullable<bool> _isPassed;
        
        private int _sectionId;
        
        private int _userId;
        
        private int _userSectionId;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnIsPassedChanging(Nullable<bool> value);
        partial void OnIsPassedChanged();
        partial void OnSectionIdChanging(int value);
        partial void OnSectionIdChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnUserSectionIdChanging(int value);
        partial void OnUserSectionIdChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="UserSection"/>.
        /// </summary>
        public UserSection()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "IsPassed".
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsPassed
        {
            get
            {
                return this._isPassed;
            }
            set
            {
                if ((this._isPassed != value))
                {
                    this.OnIsPassedChanging(value);
                    this.RaiseDataMemberChanging("IsPassed");
                    this.ValidateProperty("IsPassed", value);
                    this._isPassed = value;
                    this.RaiseDataMemberChanged("IsPassed");
                    this.OnIsPassedChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "SectionId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int SectionId
        {
            get
            {
                return this._sectionId;
            }
            set
            {
                if ((this._sectionId != value))
                {
                    this.OnSectionIdChanging(value);
                    this.RaiseDataMemberChanging("SectionId");
                    this.ValidateProperty("SectionId", value);
                    this._sectionId = value;
                    this.RaiseDataMemberChanged("SectionId");
                    this.OnSectionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "UserId".
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "UserSectionId".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int UserSectionId
        {
            get
            {
                return this._userSectionId;
            }
            set
            {
                if ((this._userSectionId != value))
                {
                    this.OnUserSectionIdChanging(value);
                    this.ValidateProperty("UserSectionId", value);
                    this._userSectionId = value;
                    this.RaisePropertyChanged("UserSectionId");
                    this.OnUserSectionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._userSectionId;
        }
    }
}
namespace MRZS.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using MRZS.Web.Models;
    
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "AnswerService" DomainService.
    /// </summary>
    public sealed partial class AnswerContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="AnswerContext"/>.
        /// </summary>
        public AnswerContext() : 
                this(new WebDomainClient<IAnswerServiceContract>(new Uri("MRZS-Web-Services-AnswerService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="AnswerContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы AnswerService.</param>
        public AnswerContext(Uri serviceUri) : 
                this(new WebDomainClient<IAnswerServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="AnswerContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public AnswerContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="Answer"/>, загруженных в данный экземпляр <see cref="AnswerContext"/>.
        /// </summary>
        public EntitySet<Answer> Answers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Answer>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Answer"/> с помощью запроса "GetAnswers".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Answer"/>.</returns>
        public EntityQuery<Answer> GetAnswersQuery()
        {
            this.ValidateMethod("GetAnswersQuery", null);
            return base.CreateQuery<Answer>("GetAnswers", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Answer"/> с помощью запроса "GetAnswersForQuestion".
        /// </summary>
        /// <param name="QuestionId">Значение параметра "QuestionId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Answer"/>.</returns>
        public EntityQuery<Answer> GetAnswersForQuestionQuery(int QuestionId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("QuestionId", QuestionId);
            this.ValidateMethod("GetAnswersForQuestionQuery", parameters);
            return base.CreateQuery<Answer>("GetAnswersForQuestion", parameters, false, true);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AnswerContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "AnswerService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAnswerServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetAnswers".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AnswerService/GetAnswersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AnswerService/GetAnswers", ReplyAction="http://tempuri.org/AnswerService/GetAnswersResponse")]
            [WebGet()]
            IAsyncResult BeginGetAnswers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetAnswers".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetAnswers".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetAnswers".</returns>
            QueryResult<Answer> EndGetAnswers(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetAnswersForQuestion".
            /// </summary>
            /// <param name="QuestionId">Значение параметра "QuestionId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AnswerService/GetAnswersForQuestionDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AnswerService/GetAnswersForQuestion", ReplyAction="http://tempuri.org/AnswerService/GetAnswersForQuestionResponse")]
            [WebGet()]
            IAsyncResult BeginGetAnswersForQuestion(int QuestionId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetAnswersForQuestion".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetAnswersForQuestion".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetAnswersForQuestion".</returns>
            QueryResult<Answer> EndGetAnswersForQuestion(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AnswerService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AnswerService/SubmitChanges", ReplyAction="http://tempuri.org/AnswerService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AnswerContextEntityContainer : EntityContainer
        {
            
            public AnswerContextEntityContainer()
            {
                this.CreateEntitySet<Answer>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "BookService" DomainService.
    /// </summary>
    public sealed partial class BookContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="BookContext"/>.
        /// </summary>
        public BookContext() : 
                this(new WebDomainClient<IBookServiceContract>(new Uri("MRZS-Web-Services-BookService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="BookContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы BookService.</param>
        public BookContext(Uri serviceUri) : 
                this(new WebDomainClient<IBookServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="BookContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public BookContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="Book"/>, загруженных в данный экземпляр <see cref="BookContext"/>.
        /// </summary>
        public EntitySet<Book> Books
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Book>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Book"/> с помощью запроса "GetBookById".
        /// </summary>
        /// <param name="bookId">Значение параметра "bookId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Book"/>.</returns>
        public EntityQuery<Book> GetBookByIdQuery(int bookId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("bookId", bookId);
            this.ValidateMethod("GetBookByIdQuery", parameters);
            return base.CreateQuery<Book>("GetBookById", parameters, false, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Book"/> с помощью запроса "GetBooks".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Book"/>.</returns>
        public EntityQuery<Book> GetBooksQuery()
        {
            this.ValidateMethod("GetBooksQuery", null);
            return base.CreateQuery<Book>("GetBooks", null, false, true);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new BookContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "BookService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IBookServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetBookById".
            /// </summary>
            /// <param name="bookId">Значение параметра "bookId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BookService/GetBookByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BookService/GetBookById", ReplyAction="http://tempuri.org/BookService/GetBookByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetBookById(int bookId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetBookById".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetBookById".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetBookById".</returns>
            QueryResult<Book> EndGetBookById(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetBooks".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BookService/GetBooksDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BookService/GetBooks", ReplyAction="http://tempuri.org/BookService/GetBooksResponse")]
            [WebGet()]
            IAsyncResult BeginGetBooks(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetBooks".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetBooks".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetBooks".</returns>
            QueryResult<Book> EndGetBooks(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BookService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BookService/SubmitChanges", ReplyAction="http://tempuri.org/BookService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class BookContextEntityContainer : EntityContainer
        {
            
            public BookContextEntityContainer()
            {
                this.CreateEntitySet<Book>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "DefectService" DomainService.
    /// </summary>
    public sealed partial class DefectContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="DefectContext"/>.
        /// </summary>
        public DefectContext() : 
                this(new WebDomainClient<IDefectServiceContract>(new Uri("MRZS-Web-Services-DefectService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="DefectContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы DefectService.</param>
        public DefectContext(Uri serviceUri) : 
                this(new WebDomainClient<IDefectServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="DefectContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public DefectContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="Defect"/>, загруженных в данный экземпляр <see cref="DefectContext"/>.
        /// </summary>
        public EntitySet<Defect> Defects
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Defect>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Defect"/> с помощью запроса "GetDefects".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Defect"/>.</returns>
        public EntityQuery<Defect> GetDefectsQuery()
        {
            this.ValidateMethod("GetDefectsQuery", null);
            return base.CreateQuery<Defect>("GetDefects", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Defect"/> с помощью запроса "GetDefectsForInterectiveTest".
        /// </summary>
        /// <param name="interectiveTestId">Значение параметра "interectiveTestId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Defect"/>.</returns>
        public EntityQuery<Defect> GetDefectsForInterectiveTestQuery(int interectiveTestId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("interectiveTestId", interectiveTestId);
            this.ValidateMethod("GetDefectsForInterectiveTestQuery", parameters);
            return base.CreateQuery<Defect>("GetDefectsForInterectiveTest", parameters, false, true);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new DefectContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "DefectService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IDefectServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetDefects".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DefectService/GetDefectsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DefectService/GetDefects", ReplyAction="http://tempuri.org/DefectService/GetDefectsResponse")]
            [WebGet()]
            IAsyncResult BeginGetDefects(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetDefects".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetDefects".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetDefects".</returns>
            QueryResult<Defect> EndGetDefects(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetDefectsForInterectiveTest".
            /// </summary>
            /// <param name="interectiveTestId">Значение параметра "interectiveTestId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DefectService/GetDefectsForInterectiveTestDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DefectService/GetDefectsForInterectiveTest", ReplyAction="http://tempuri.org/DefectService/GetDefectsForInterectiveTestResponse")]
            [WebGet()]
            IAsyncResult BeginGetDefectsForInterectiveTest(int interectiveTestId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetDefectsForInterectiveTest".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetDefectsForInterectiveTest".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetDefectsForInterectiveTest".</returns>
            QueryResult<Defect> EndGetDefectsForInterectiveTest(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DefectService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DefectService/SubmitChanges", ReplyAction="http://tempuri.org/DefectService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class DefectContextEntityContainer : EntityContainer
        {
            
            public DefectContextEntityContainer()
            {
                this.CreateEntitySet<Defect>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "GroupService" DomainService.
    /// </summary>
    public sealed partial class GroupContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="GroupContext"/>.
        /// </summary>
        public GroupContext() : 
                this(new WebDomainClient<IGroupServiceContract>(new Uri("MRZS-Web-Services-GroupService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="GroupContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы GroupService.</param>
        public GroupContext(Uri serviceUri) : 
                this(new WebDomainClient<IGroupServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="GroupContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public GroupContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="Group"/>, загруженных в данный экземпляр <see cref="GroupContext"/>.
        /// </summary>
        public EntitySet<Group> Groups
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Group>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Group"/> с помощью запроса "GetGroups".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Group"/>.</returns>
        public EntityQuery<Group> GetGroupsQuery()
        {
            this.ValidateMethod("GetGroupsQuery", null);
            return base.CreateQuery<Group>("GetGroups", null, false, true);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new GroupContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "GroupService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IGroupServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetGroups".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GroupService/GetGroupsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GroupService/GetGroups", ReplyAction="http://tempuri.org/GroupService/GetGroupsResponse")]
            [WebGet()]
            IAsyncResult BeginGetGroups(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetGroups".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetGroups".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetGroups".</returns>
            QueryResult<Group> EndGetGroups(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/GroupService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/GroupService/SubmitChanges", ReplyAction="http://tempuri.org/GroupService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class GroupContextEntityContainer : EntityContainer
        {
            
            public GroupContextEntityContainer()
            {
                this.CreateEntitySet<Group>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "InterectiveTestService" DomainService.
    /// </summary>
    public sealed partial class InterectiveTestContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="InterectiveTestContext"/>.
        /// </summary>
        public InterectiveTestContext() : 
                this(new WebDomainClient<IInterectiveTestServiceContract>(new Uri("MRZS-Web-Services-InterectiveTestService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="InterectiveTestContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы InterectiveTestService.</param>
        public InterectiveTestContext(Uri serviceUri) : 
                this(new WebDomainClient<IInterectiveTestServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="InterectiveTestContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public InterectiveTestContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="InterectiveTest"/>, загруженных в данный экземпляр <see cref="InterectiveTestContext"/>.
        /// </summary>
        public EntitySet<InterectiveTest> InterectiveTests
        {
            get
            {
                return base.EntityContainer.GetEntitySet<InterectiveTest>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="InterectiveTest"/> с помощью запроса "GetInterectiveTestById".
        /// </summary>
        /// <param name="interectiveTestId">Значение параметра "interectiveTestId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="InterectiveTest"/>.</returns>
        public EntityQuery<InterectiveTest> GetInterectiveTestByIdQuery(int interectiveTestId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("interectiveTestId", interectiveTestId);
            this.ValidateMethod("GetInterectiveTestByIdQuery", parameters);
            return base.CreateQuery<InterectiveTest>("GetInterectiveTestById", parameters, false, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="InterectiveTest"/> с помощью запроса "GetInterectiveTestByIndex".
        /// </summary>
        /// <param name="sectionId">Значение параметра "sectionId" для запроса.</param>
        /// <param name="index">Значение параметра "index" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="InterectiveTest"/>.</returns>
        public EntityQuery<InterectiveTest> GetInterectiveTestByIndexQuery(int sectionId, int index)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sectionId", sectionId);
            parameters.Add("index", index);
            this.ValidateMethod("GetInterectiveTestByIndexQuery", parameters);
            return base.CreateQuery<InterectiveTest>("GetInterectiveTestByIndex", parameters, false, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="InterectiveTest"/> с помощью запроса "GetInterectiveTestForSectionRandom".
        /// </summary>
        /// <param name="sectionId">Значение параметра "sectionId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="InterectiveTest"/>.</returns>
        public EntityQuery<InterectiveTest> GetInterectiveTestForSectionRandomQuery(int sectionId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sectionId", sectionId);
            this.ValidateMethod("GetInterectiveTestForSectionRandomQuery", parameters);
            return base.CreateQuery<InterectiveTest>("GetInterectiveTestForSectionRandom", parameters, false, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="InterectiveTest"/> с помощью запроса "GetInterectiveTests".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="InterectiveTest"/>.</returns>
        public EntityQuery<InterectiveTest> GetInterectiveTestsQuery()
        {
            this.ValidateMethod("GetInterectiveTestsQuery", null);
            return base.CreateQuery<InterectiveTest>("GetInterectiveTests", null, false, true);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new InterectiveTestContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "InterectiveTestService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IInterectiveTestServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetInterectiveTestById".
            /// </summary>
            /// <param name="interectiveTestId">Значение параметра "interectiveTestId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/InterectiveTestService/GetInterectiveTestByIdDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/InterectiveTestService/GetInterectiveTestById", ReplyAction="http://tempuri.org/InterectiveTestService/GetInterectiveTestByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetInterectiveTestById(int interectiveTestId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetInterectiveTestById".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetInterectiveTestById".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetInterectiveTestById".</returns>
            QueryResult<InterectiveTest> EndGetInterectiveTestById(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetInterectiveTestByIndex".
            /// </summary>
            /// <param name="sectionId">Значение параметра "sectionId" для данного действия.</param>
            /// <param name="index">Значение параметра "index" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/InterectiveTestService/GetInterectiveTestByIndexDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/InterectiveTestService/GetInterectiveTestByIndex", ReplyAction="http://tempuri.org/InterectiveTestService/GetInterectiveTestByIndexResponse")]
            [WebGet()]
            IAsyncResult BeginGetInterectiveTestByIndex(int sectionId, int index, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetInterectiveTestByIndex".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetInterectiveTestByIndex".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetInterectiveTestByIndex".</returns>
            QueryResult<InterectiveTest> EndGetInterectiveTestByIndex(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetInterectiveTestForSectionRandom".
            /// </summary>
            /// <param name="sectionId">Значение параметра "sectionId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/InterectiveTestService/GetInterectiveTestForSectionRandomDomai" +
                "nServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/InterectiveTestService/GetInterectiveTestForSectionRandom", ReplyAction="http://tempuri.org/InterectiveTestService/GetInterectiveTestForSectionRandomRespo" +
                "nse")]
            [WebGet()]
            IAsyncResult BeginGetInterectiveTestForSectionRandom(int sectionId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetInterectiveTestForSectionRandom".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetInterectiveTestForSectionRandom".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetInterectiveTestForSectionRandom".</returns>
            QueryResult<InterectiveTest> EndGetInterectiveTestForSectionRandom(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetInterectiveTests".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/InterectiveTestService/GetInterectiveTestsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/InterectiveTestService/GetInterectiveTests", ReplyAction="http://tempuri.org/InterectiveTestService/GetInterectiveTestsResponse")]
            [WebGet()]
            IAsyncResult BeginGetInterectiveTests(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetInterectiveTests".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetInterectiveTests".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetInterectiveTests".</returns>
            QueryResult<InterectiveTest> EndGetInterectiveTests(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/InterectiveTestService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/InterectiveTestService/SubmitChanges", ReplyAction="http://tempuri.org/InterectiveTestService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class InterectiveTestContextEntityContainer : EntityContainer
        {
            
            public InterectiveTestContextEntityContainer()
            {
                this.CreateEntitySet<InterectiveTest>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "InterectiveTestLogService" DomainService.
    /// </summary>
    public sealed partial class InterectiveTestLogContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="InterectiveTestLogContext"/>.
        /// </summary>
        public InterectiveTestLogContext() : 
                this(new WebDomainClient<IInterectiveTestLogServiceContract>(new Uri("MRZS-Web-Services-InterectiveTestLogService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="InterectiveTestLogContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы InterectiveTestLogService.</param>
        public InterectiveTestLogContext(Uri serviceUri) : 
                this(new WebDomainClient<IInterectiveTestLogServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="InterectiveTestLogContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public InterectiveTestLogContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="InterectiveTestLog"/>, загруженных в данный экземпляр <see cref="InterectiveTestLogContext"/>.
        /// </summary>
        public EntitySet<InterectiveTestLog> InterectiveTestLogs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<InterectiveTestLog>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="InterectiveTestLog"/> с помощью запроса "GetInterectiveTestLogs".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="InterectiveTestLog"/>.</returns>
        public EntityQuery<InterectiveTestLog> GetInterectiveTestLogsQuery()
        {
            this.ValidateMethod("GetInterectiveTestLogsQuery", null);
            return base.CreateQuery<InterectiveTestLog>("GetInterectiveTestLogs", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="InterectiveTestLog"/> с помощью запроса "GetInterectiveTestLogsForSection".
        /// </summary>
        /// <param name="sectionId">Значение параметра "sectionId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="InterectiveTestLog"/>.</returns>
        public EntityQuery<InterectiveTestLog> GetInterectiveTestLogsForSectionQuery(int sectionId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sectionId", sectionId);
            this.ValidateMethod("GetInterectiveTestLogsForSectionQuery", parameters);
            return base.CreateQuery<InterectiveTestLog>("GetInterectiveTestLogsForSection", parameters, false, true);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new InterectiveTestLogContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "InterectiveTestLogService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IInterectiveTestLogServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetInterectiveTestLogs".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/InterectiveTestLogService/GetInterectiveTestLogsDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/InterectiveTestLogService/GetInterectiveTestLogs", ReplyAction="http://tempuri.org/InterectiveTestLogService/GetInterectiveTestLogsResponse")]
            [WebGet()]
            IAsyncResult BeginGetInterectiveTestLogs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetInterectiveTestLogs".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetInterectiveTestLogs".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetInterectiveTestLogs".</returns>
            QueryResult<InterectiveTestLog> EndGetInterectiveTestLogs(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetInterectiveTestLogsForSection".
            /// </summary>
            /// <param name="sectionId">Значение параметра "sectionId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/InterectiveTestLogService/GetInterectiveTestLogsForSectionDoma" +
                "inServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/InterectiveTestLogService/GetInterectiveTestLogsForSection", ReplyAction="http://tempuri.org/InterectiveTestLogService/GetInterectiveTestLogsForSectionResp" +
                "onse")]
            [WebGet()]
            IAsyncResult BeginGetInterectiveTestLogsForSection(int sectionId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetInterectiveTestLogsForSection".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetInterectiveTestLogsForSection".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetInterectiveTestLogsForSection".</returns>
            QueryResult<InterectiveTestLog> EndGetInterectiveTestLogsForSection(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/InterectiveTestLogService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/InterectiveTestLogService/SubmitChanges", ReplyAction="http://tempuri.org/InterectiveTestLogService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class InterectiveTestLogContextEntityContainer : EntityContainer
        {
            
            public InterectiveTestLogContextEntityContainer()
            {
                this.CreateEntitySet<InterectiveTestLog>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "MediaContentService" DomainService.
    /// </summary>
    public sealed partial class MediaContentContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="MediaContentContext"/>.
        /// </summary>
        public MediaContentContext() : 
                this(new WebDomainClient<IMediaContentServiceContract>(new Uri("MRZS-Web-Services-MediaContentService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="MediaContentContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы MediaContentService.</param>
        public MediaContentContext(Uri serviceUri) : 
                this(new WebDomainClient<IMediaContentServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="MediaContentContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public MediaContentContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="MultimediaContent"/>, загруженных в данный экземпляр <see cref="MediaContentContext"/>.
        /// </summary>
        public EntitySet<MultimediaContent> MultimediaContents
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MultimediaContent>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="MultimediaContent"/> с помощью запроса "GetMultimediaContents".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="MultimediaContent"/>.</returns>
        public EntityQuery<MultimediaContent> GetMultimediaContentsQuery()
        {
            this.ValidateMethod("GetMultimediaContentsQuery", null);
            return base.CreateQuery<MultimediaContent>("GetMultimediaContents", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="MultimediaContent"/> с помощью запроса "GetMultimediaContentsForPage".
        /// </summary>
        /// <param name="pageId">Значение параметра "pageId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="MultimediaContent"/>.</returns>
        public EntityQuery<MultimediaContent> GetMultimediaContentsForPageQuery(int pageId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("pageId", pageId);
            this.ValidateMethod("GetMultimediaContentsForPageQuery", parameters);
            return base.CreateQuery<MultimediaContent>("GetMultimediaContentsForPage", parameters, false, true);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MediaContentContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "MediaContentService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IMediaContentServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetMultimediaContents".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MediaContentService/GetMultimediaContentsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MediaContentService/GetMultimediaContents", ReplyAction="http://tempuri.org/MediaContentService/GetMultimediaContentsResponse")]
            [WebGet()]
            IAsyncResult BeginGetMultimediaContents(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetMultimediaContents".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetMultimediaContents".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetMultimediaContents".</returns>
            QueryResult<MultimediaContent> EndGetMultimediaContents(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetMultimediaContentsForPage".
            /// </summary>
            /// <param name="pageId">Значение параметра "pageId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MediaContentService/GetMultimediaContentsForPageDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MediaContentService/GetMultimediaContentsForPage", ReplyAction="http://tempuri.org/MediaContentService/GetMultimediaContentsForPageResponse")]
            [WebGet()]
            IAsyncResult BeginGetMultimediaContentsForPage(int pageId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetMultimediaContentsForPage".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetMultimediaContentsForPage".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetMultimediaContentsForPage".</returns>
            QueryResult<MultimediaContent> EndGetMultimediaContentsForPage(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MediaContentService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MediaContentService/SubmitChanges", ReplyAction="http://tempuri.org/MediaContentService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class MediaContentContextEntityContainer : EntityContainer
        {
            
            public MediaContentContextEntityContainer()
            {
                this.CreateEntitySet<MultimediaContent>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "PageService" DomainService.
    /// </summary>
    public sealed partial class PageContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="PageContext"/>.
        /// </summary>
        public PageContext() : 
                this(new WebDomainClient<IPageServiceContract>(new Uri("MRZS-Web-Services-PageService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="PageContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы PageService.</param>
        public PageContext(Uri serviceUri) : 
                this(new WebDomainClient<IPageServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="PageContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public PageContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="Page"/>, загруженных в данный экземпляр <see cref="PageContext"/>.
        /// </summary>
        public EntitySet<Page> Pages
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Page>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Page"/> с помощью запроса "GetNextPageForStudent".
        /// </summary>
        /// <param name="currentPageId">Значение параметра "currentPageId" для запроса.</param>
        /// <param name="userName">Значение параметра "userName" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Page"/>.</returns>
        public EntityQuery<Page> GetNextPageForStudentQuery(int currentPageId, string userName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("currentPageId", currentPageId);
            parameters.Add("userName", userName);
            this.ValidateMethod("GetNextPageForStudentQuery", parameters);
            return base.CreateQuery<Page>("GetNextPageForStudent", parameters, false, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Page"/> с помощью запроса "GetPageById".
        /// </summary>
        /// <param name="pageId">Значение параметра "pageId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Page"/>.</returns>
        public EntityQuery<Page> GetPageByIdQuery(int pageId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("pageId", pageId);
            this.ValidateMethod("GetPageByIdQuery", parameters);
            return base.CreateQuery<Page>("GetPageById", parameters, false, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Page"/> с помощью запроса "GetPages".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Page"/>.</returns>
        public EntityQuery<Page> GetPagesQuery()
        {
            this.ValidateMethod("GetPagesQuery", null);
            return base.CreateQuery<Page>("GetPages", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Page"/> с помощью запроса "GetPagesForSection".
        /// </summary>
        /// <param name="sectionId">Значение параметра "sectionId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Page"/>.</returns>
        public EntityQuery<Page> GetPagesForSectionQuery(int sectionId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sectionId", sectionId);
            this.ValidateMethod("GetPagesForSectionQuery", parameters);
            return base.CreateQuery<Page>("GetPagesForSection", parameters, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Page"/> с помощью запроса "GetPreviousPageForStudent".
        /// </summary>
        /// <param name="currentPageId">Значение параметра "currentPageId" для запроса.</param>
        /// <param name="userName">Значение параметра "userName" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Page"/>.</returns>
        public EntityQuery<Page> GetPreviousPageForStudentQuery(int currentPageId, string userName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("currentPageId", currentPageId);
            parameters.Add("userName", userName);
            this.ValidateMethod("GetPreviousPageForStudentQuery", parameters);
            return base.CreateQuery<Page>("GetPreviousPageForStudent", parameters, false, false);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new PageContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "PageService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IPageServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetNextPageForStudent".
            /// </summary>
            /// <param name="currentPageId">Значение параметра "currentPageId" для данного действия.</param>
            /// <param name="userName">Значение параметра "userName" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PageService/GetNextPageForStudentDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PageService/GetNextPageForStudent", ReplyAction="http://tempuri.org/PageService/GetNextPageForStudentResponse")]
            [WebGet()]
            IAsyncResult BeginGetNextPageForStudent(int currentPageId, string userName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetNextPageForStudent".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetNextPageForStudent".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetNextPageForStudent".</returns>
            QueryResult<Page> EndGetNextPageForStudent(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetPageById".
            /// </summary>
            /// <param name="pageId">Значение параметра "pageId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PageService/GetPageByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PageService/GetPageById", ReplyAction="http://tempuri.org/PageService/GetPageByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetPageById(int pageId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetPageById".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetPageById".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetPageById".</returns>
            QueryResult<Page> EndGetPageById(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetPages".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PageService/GetPagesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PageService/GetPages", ReplyAction="http://tempuri.org/PageService/GetPagesResponse")]
            [WebGet()]
            IAsyncResult BeginGetPages(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetPages".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetPages".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetPages".</returns>
            QueryResult<Page> EndGetPages(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetPagesForSection".
            /// </summary>
            /// <param name="sectionId">Значение параметра "sectionId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PageService/GetPagesForSectionDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PageService/GetPagesForSection", ReplyAction="http://tempuri.org/PageService/GetPagesForSectionResponse")]
            [WebGet()]
            IAsyncResult BeginGetPagesForSection(int sectionId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetPagesForSection".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetPagesForSection".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetPagesForSection".</returns>
            QueryResult<Page> EndGetPagesForSection(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetPreviousPageForStudent".
            /// </summary>
            /// <param name="currentPageId">Значение параметра "currentPageId" для данного действия.</param>
            /// <param name="userName">Значение параметра "userName" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PageService/GetPreviousPageForStudentDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PageService/GetPreviousPageForStudent", ReplyAction="http://tempuri.org/PageService/GetPreviousPageForStudentResponse")]
            [WebGet()]
            IAsyncResult BeginGetPreviousPageForStudent(int currentPageId, string userName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetPreviousPageForStudent".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetPreviousPageForStudent".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetPreviousPageForStudent".</returns>
            QueryResult<Page> EndGetPreviousPageForStudent(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PageService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PageService/SubmitChanges", ReplyAction="http://tempuri.org/PageService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class PageContextEntityContainer : EntityContainer
        {
            
            public PageContextEntityContainer()
            {
                this.CreateEntitySet<Page>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "QuestionService" DomainService.
    /// </summary>
    public sealed partial class QuestionContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="QuestionContext"/>.
        /// </summary>
        public QuestionContext() : 
                this(new WebDomainClient<IQuestionServiceContract>(new Uri("MRZS-Web-Services-QuestionService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="QuestionContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы QuestionService.</param>
        public QuestionContext(Uri serviceUri) : 
                this(new WebDomainClient<IQuestionServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="QuestionContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public QuestionContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="Question"/>, загруженных в данный экземпляр <see cref="QuestionContext"/>.
        /// </summary>
        public EntitySet<Question> Questions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Question>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Question"/> с помощью запроса "GetQuestions".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Question"/>.</returns>
        public EntityQuery<Question> GetQuestionsQuery()
        {
            this.ValidateMethod("GetQuestionsQuery", null);
            return base.CreateQuery<Question>("GetQuestions", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Question"/> с помощью запроса "GetQuestionsForLearning".
        /// </summary>
        /// <param name="quizId">Значение параметра "quizId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Question"/>.</returns>
        public EntityQuery<Question> GetQuestionsForLearningQuery(int quizId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("quizId", quizId);
            this.ValidateMethod("GetQuestionsForLearningQuery", parameters);
            return base.CreateQuery<Question>("GetQuestionsForLearning", parameters, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Question"/> с помощью запроса "GetQuestionsForQuiz".
        /// </summary>
        /// <param name="quizId">Значение параметра "quizId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Question"/>.</returns>
        public EntityQuery<Question> GetQuestionsForQuizQuery(int quizId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("quizId", quizId);
            this.ValidateMethod("GetQuestionsForQuizQuery", parameters);
            return base.CreateQuery<Question>("GetQuestionsForQuiz", parameters, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Question"/> с помощью запроса "GetQuestionsForSections".
        /// </summary>
        /// <param name="sectionId">Значение параметра "sectionId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Question"/>.</returns>
        public EntityQuery<Question> GetQuestionsForSectionsQuery(int sectionId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sectionId", sectionId);
            this.ValidateMethod("GetQuestionsForSectionsQuery", parameters);
            return base.CreateQuery<Question>("GetQuestionsForSections", parameters, false, true);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new QuestionContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "QuestionService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IQuestionServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetQuestions".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/QuestionService/GetQuestionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/QuestionService/GetQuestions", ReplyAction="http://tempuri.org/QuestionService/GetQuestionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetQuestions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetQuestions".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetQuestions".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetQuestions".</returns>
            QueryResult<Question> EndGetQuestions(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetQuestionsForLearning".
            /// </summary>
            /// <param name="quizId">Значение параметра "quizId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/QuestionService/GetQuestionsForLearningDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/QuestionService/GetQuestionsForLearning", ReplyAction="http://tempuri.org/QuestionService/GetQuestionsForLearningResponse")]
            [WebGet()]
            IAsyncResult BeginGetQuestionsForLearning(int quizId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetQuestionsForLearning".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetQuestionsForLearning".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetQuestionsForLearning".</returns>
            QueryResult<Question> EndGetQuestionsForLearning(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetQuestionsForQuiz".
            /// </summary>
            /// <param name="quizId">Значение параметра "quizId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/QuestionService/GetQuestionsForQuizDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/QuestionService/GetQuestionsForQuiz", ReplyAction="http://tempuri.org/QuestionService/GetQuestionsForQuizResponse")]
            [WebGet()]
            IAsyncResult BeginGetQuestionsForQuiz(int quizId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetQuestionsForQuiz".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetQuestionsForQuiz".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetQuestionsForQuiz".</returns>
            QueryResult<Question> EndGetQuestionsForQuiz(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetQuestionsForSections".
            /// </summary>
            /// <param name="sectionId">Значение параметра "sectionId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/QuestionService/GetQuestionsForSectionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/QuestionService/GetQuestionsForSections", ReplyAction="http://tempuri.org/QuestionService/GetQuestionsForSectionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetQuestionsForSections(int sectionId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetQuestionsForSections".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetQuestionsForSections".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetQuestionsForSections".</returns>
            QueryResult<Question> EndGetQuestionsForSections(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/QuestionService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/QuestionService/SubmitChanges", ReplyAction="http://tempuri.org/QuestionService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class QuestionContextEntityContainer : EntityContainer
        {
            
            public QuestionContextEntityContainer()
            {
                this.CreateEntitySet<Question>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "QuizService" DomainService.
    /// </summary>
    public sealed partial class QuizContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="QuizContext"/>.
        /// </summary>
        public QuizContext() : 
                this(new WebDomainClient<IQuizServiceContract>(new Uri("MRZS-Web-Services-QuizService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="QuizContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы QuizService.</param>
        public QuizContext(Uri serviceUri) : 
                this(new WebDomainClient<IQuizServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="QuizContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public QuizContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="Quiz"/>, загруженных в данный экземпляр <see cref="QuizContext"/>.
        /// </summary>
        public EntitySet<Quiz> Quizs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Quiz>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Quiz"/> с помощью запроса "GetQuizs".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Quiz"/>.</returns>
        public EntityQuery<Quiz> GetQuizsQuery()
        {
            this.ValidateMethod("GetQuizsQuery", null);
            return base.CreateQuery<Quiz>("GetQuizs", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Quiz"/> с помощью запроса "GetQuizsById".
        /// </summary>
        /// <param name="quizId">Значение параметра "quizId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Quiz"/>.</returns>
        public EntityQuery<Quiz> GetQuizsByIdQuery(int quizId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("quizId", quizId);
            this.ValidateMethod("GetQuizsByIdQuery", parameters);
            return base.CreateQuery<Quiz>("GetQuizsById", parameters, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Quiz"/> с помощью запроса "GetQuizsForSection".
        /// </summary>
        /// <param name="sectionId">Значение параметра "sectionId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Quiz"/>.</returns>
        public EntityQuery<Quiz> GetQuizsForSectionQuery(int sectionId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sectionId", sectionId);
            this.ValidateMethod("GetQuizsForSectionQuery", parameters);
            return base.CreateQuery<Quiz>("GetQuizsForSection", parameters, false, true);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new QuizContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "QuizService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IQuizServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetQuizs".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/QuizService/GetQuizsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/QuizService/GetQuizs", ReplyAction="http://tempuri.org/QuizService/GetQuizsResponse")]
            [WebGet()]
            IAsyncResult BeginGetQuizs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetQuizs".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetQuizs".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetQuizs".</returns>
            QueryResult<Quiz> EndGetQuizs(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetQuizsById".
            /// </summary>
            /// <param name="quizId">Значение параметра "quizId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/QuizService/GetQuizsByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/QuizService/GetQuizsById", ReplyAction="http://tempuri.org/QuizService/GetQuizsByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetQuizsById(int quizId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetQuizsById".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetQuizsById".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetQuizsById".</returns>
            QueryResult<Quiz> EndGetQuizsById(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetQuizsForSection".
            /// </summary>
            /// <param name="sectionId">Значение параметра "sectionId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/QuizService/GetQuizsForSectionDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/QuizService/GetQuizsForSection", ReplyAction="http://tempuri.org/QuizService/GetQuizsForSectionResponse")]
            [WebGet()]
            IAsyncResult BeginGetQuizsForSection(int sectionId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetQuizsForSection".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetQuizsForSection".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetQuizsForSection".</returns>
            QueryResult<Quiz> EndGetQuizsForSection(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/QuizService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/QuizService/SubmitChanges", ReplyAction="http://tempuri.org/QuizService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class QuizContextEntityContainer : EntityContainer
        {
            
            public QuizContextEntityContainer()
            {
                this.CreateEntitySet<Quiz>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "RepairemenService" DomainService.
    /// </summary>
    public sealed partial class RepairemenContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="RepairemenContext"/>.
        /// </summary>
        public RepairemenContext() : 
                this(new WebDomainClient<IRepairemenServiceContract>(new Uri("MRZS-Web-Services-RepairemenService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="RepairemenContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы RepairemenService.</param>
        public RepairemenContext(Uri serviceUri) : 
                this(new WebDomainClient<IRepairemenServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="RepairemenContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public RepairemenContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="Repairman"/>, загруженных в данный экземпляр <see cref="RepairemenContext"/>.
        /// </summary>
        public EntitySet<Repairman> Repairmans
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Repairman>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Repairman"/> с помощью запроса "GetRepairmen".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Repairman"/>.</returns>
        public EntityQuery<Repairman> GetRepairmenQuery()
        {
            this.ValidateMethod("GetRepairmenQuery", null);
            return base.CreateQuery<Repairman>("GetRepairmen", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Repairman"/> с помощью запроса "GetRepairmenForDefect".
        /// </summary>
        /// <param name="defectId">Значение параметра "defectId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Repairman"/>.</returns>
        public EntityQuery<Repairman> GetRepairmenForDefectQuery(int defectId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("defectId", defectId);
            this.ValidateMethod("GetRepairmenForDefectQuery", parameters);
            return base.CreateQuery<Repairman>("GetRepairmenForDefect", parameters, false, true);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new RepairemenContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "RepairemenService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IRepairemenServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetRepairmen".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RepairemenService/GetRepairmenDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RepairemenService/GetRepairmen", ReplyAction="http://tempuri.org/RepairemenService/GetRepairmenResponse")]
            [WebGet()]
            IAsyncResult BeginGetRepairmen(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetRepairmen".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetRepairmen".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetRepairmen".</returns>
            QueryResult<Repairman> EndGetRepairmen(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetRepairmenForDefect".
            /// </summary>
            /// <param name="defectId">Значение параметра "defectId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RepairemenService/GetRepairmenForDefectDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RepairemenService/GetRepairmenForDefect", ReplyAction="http://tempuri.org/RepairemenService/GetRepairmenForDefectResponse")]
            [WebGet()]
            IAsyncResult BeginGetRepairmenForDefect(int defectId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetRepairmenForDefect".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetRepairmenForDefect".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetRepairmenForDefect".</returns>
            QueryResult<Repairman> EndGetRepairmenForDefect(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RepairemenService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RepairemenService/SubmitChanges", ReplyAction="http://tempuri.org/RepairemenService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class RepairemenContextEntityContainer : EntityContainer
        {
            
            public RepairemenContextEntityContainer()
            {
                this.CreateEntitySet<Repairman>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "ResultAnswerService" DomainService.
    /// </summary>
    public sealed partial class ResultAnswerContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="ResultAnswerContext"/>.
        /// </summary>
        public ResultAnswerContext() : 
                this(new WebDomainClient<IResultAnswerServiceContract>(new Uri("MRZS-Web-Services-ResultAnswerService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="ResultAnswerContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы ResultAnswerService.</param>
        public ResultAnswerContext(Uri serviceUri) : 
                this(new WebDomainClient<IResultAnswerServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="ResultAnswerContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public ResultAnswerContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="ResultAnswer"/>, загруженных в данный экземпляр <see cref="ResultAnswerContext"/>.
        /// </summary>
        public EntitySet<ResultAnswer> ResultAnswers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ResultAnswer>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="ResultAnswer"/> с помощью запроса "GetResultAnswers".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="ResultAnswer"/>.</returns>
        public EntityQuery<ResultAnswer> GetResultAnswersQuery()
        {
            this.ValidateMethod("GetResultAnswersQuery", null);
            return base.CreateQuery<ResultAnswer>("GetResultAnswers", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="ResultAnswer"/> с помощью запроса "GetResultAnswersForQuizResult".
        /// </summary>
        /// <param name="quizResultId">Значение параметра "quizResultId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="ResultAnswer"/>.</returns>
        public EntityQuery<ResultAnswer> GetResultAnswersForQuizResultQuery(int quizResultId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("quizResultId", quizResultId);
            this.ValidateMethod("GetResultAnswersForQuizResultQuery", parameters);
            return base.CreateQuery<ResultAnswer>("GetResultAnswersForQuizResult", parameters, false, true);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ResultAnswerContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "ResultAnswerService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IResultAnswerServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetResultAnswers".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResultAnswerService/GetResultAnswersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResultAnswerService/GetResultAnswers", ReplyAction="http://tempuri.org/ResultAnswerService/GetResultAnswersResponse")]
            [WebGet()]
            IAsyncResult BeginGetResultAnswers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetResultAnswers".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetResultAnswers".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetResultAnswers".</returns>
            QueryResult<ResultAnswer> EndGetResultAnswers(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetResultAnswersForQuizResult".
            /// </summary>
            /// <param name="quizResultId">Значение параметра "quizResultId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResultAnswerService/GetResultAnswersForQuizResultDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResultAnswerService/GetResultAnswersForQuizResult", ReplyAction="http://tempuri.org/ResultAnswerService/GetResultAnswersForQuizResultResponse")]
            [WebGet()]
            IAsyncResult BeginGetResultAnswersForQuizResult(int quizResultId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetResultAnswersForQuizResult".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetResultAnswersForQuizResult".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetResultAnswersForQuizResult".</returns>
            QueryResult<ResultAnswer> EndGetResultAnswersForQuizResult(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResultAnswerService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResultAnswerService/SubmitChanges", ReplyAction="http://tempuri.org/ResultAnswerService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ResultAnswerContextEntityContainer : EntityContainer
        {
            
            public ResultAnswerContextEntityContainer()
            {
                this.CreateEntitySet<ResultAnswer>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "ResultQuizService" DomainService.
    /// </summary>
    public sealed partial class ResultQuizContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="ResultQuizContext"/>.
        /// </summary>
        public ResultQuizContext() : 
                this(new WebDomainClient<IResultQuizServiceContract>(new Uri("MRZS-Web-Services-ResultQuizService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="ResultQuizContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы ResultQuizService.</param>
        public ResultQuizContext(Uri serviceUri) : 
                this(new WebDomainClient<IResultQuizServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="ResultQuizContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public ResultQuizContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="QuizLogDTO"/>, загруженных в данный экземпляр <see cref="ResultQuizContext"/>.
        /// </summary>
        public EntitySet<QuizLogDTO> QuizLogDTOs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<QuizLogDTO>();
            }
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="QuizResult"/>, загруженных в данный экземпляр <see cref="ResultQuizContext"/>.
        /// </summary>
        public EntitySet<QuizResult> QuizResults
        {
            get
            {
                return base.EntityContainer.GetEntitySet<QuizResult>();
            }
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="QuestionLog"/>, загруженных в данный экземпляр <see cref="ResultQuizContext"/>.
        /// </summary>
        public EntitySet<QuestionLog> QuestionLogs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<QuestionLog>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="QuizLogDTO"/> с помощью запроса "GetAllQuizResultsForUser".
        /// </summary>
        /// <param name="userId">Значение параметра "userId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="QuizLogDTO"/>.</returns>
        public EntityQuery<QuizLogDTO> GetAllQuizResultsForUserQuery(int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            this.ValidateMethod("GetAllQuizResultsForUserQuery", parameters);
            return base.CreateQuery<QuizLogDTO>("GetAllQuizResultsForUser", parameters, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="QuizLogDTO"/> с помощью запроса "GetLastQuizResultsForUser".
        /// </summary>
        /// <param name="userId">Значение параметра "userId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="QuizLogDTO"/>.</returns>
        public EntityQuery<QuizLogDTO> GetLastQuizResultsForUserQuery(int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            this.ValidateMethod("GetLastQuizResultsForUserQuery", parameters);
            return base.CreateQuery<QuizLogDTO>("GetLastQuizResultsForUser", parameters, false, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="QuizResult"/> с помощью запроса "GetQuizResultById".
        /// </summary>
        /// <param name="quizResultId">Значение параметра "quizResultId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="QuizResult"/>.</returns>
        public EntityQuery<QuizResult> GetQuizResultByIdQuery(int quizResultId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("quizResultId", quizResultId);
            this.ValidateMethod("GetQuizResultByIdQuery", parameters);
            return base.CreateQuery<QuizResult>("GetQuizResultById", parameters, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="QuizResult"/> с помощью запроса "GetQuizResultByQuizId".
        /// </summary>
        /// <param name="quizId">Значение параметра "quizId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="QuizResult"/>.</returns>
        public EntityQuery<QuizResult> GetQuizResultByQuizIdQuery(int quizId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("quizId", quizId);
            this.ValidateMethod("GetQuizResultByQuizIdQuery", parameters);
            return base.CreateQuery<QuizResult>("GetQuizResultByQuizId", parameters, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="QuizResult"/> с помощью запроса "GetQuizResults".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="QuizResult"/>.</returns>
        public EntityQuery<QuizResult> GetQuizResultsQuery()
        {
            this.ValidateMethod("GetQuizResultsQuery", null);
            return base.CreateQuery<QuizResult>("GetQuizResults", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="QuizResult"/> с помощью запроса "GetQuizResultsForUser".
        /// </summary>
        /// <param name="userId">Значение параметра "userId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="QuizResult"/>.</returns>
        public EntityQuery<QuizResult> GetQuizResultsForUserQuery(int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            this.ValidateMethod("GetQuizResultsForUserQuery", parameters);
            return base.CreateQuery<QuizResult>("GetQuizResultsForUser", parameters, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="QuestionLog"/> с помощью запроса "GetStudentQuestionLog".
        /// </summary>
        /// <param name="resultQuizId">Значение параметра "resultQuizId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="QuestionLog"/>.</returns>
        public EntityQuery<QuestionLog> GetStudentQuestionLogQuery(int resultQuizId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("resultQuizId", resultQuizId);
            this.ValidateMethod("GetStudentQuestionLogQuery", parameters);
            return base.CreateQuery<QuestionLog>("GetStudentQuestionLog", parameters, false, true);
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "GetStudentScore" службы DomainService.
        /// </summary>
        /// <param name="quizResultId">Значение параметра "quizResultId" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<decimal> GetStudentScore(int quizResultId, Action<InvokeOperation<decimal>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("quizResultId", quizResultId);
            this.ValidateMethod("GetStudentScore", parameters);
            return ((InvokeOperation<decimal>)(this.InvokeOperation("GetStudentScore", typeof(decimal), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "GetStudentScore" службы DomainService.
        /// </summary>
        /// <param name="quizResultId">Значение параметра "quizResultId" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<decimal> GetStudentScore(int quizResultId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("quizResultId", quizResultId);
            this.ValidateMethod("GetStudentScore", parameters);
            return ((InvokeOperation<decimal>)(this.InvokeOperation("GetStudentScore", typeof(decimal), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ResultQuizContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "ResultQuizService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IResultQuizServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetAllQuizResultsForUser".
            /// </summary>
            /// <param name="userId">Значение параметра "userId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResultQuizService/GetAllQuizResultsForUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResultQuizService/GetAllQuizResultsForUser", ReplyAction="http://tempuri.org/ResultQuizService/GetAllQuizResultsForUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllQuizResultsForUser(int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetAllQuizResultsForUser".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetAllQuizResultsForUser".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetAllQuizResultsForUser".</returns>
            QueryResult<QuizLogDTO> EndGetAllQuizResultsForUser(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetLastQuizResultsForUser".
            /// </summary>
            /// <param name="userId">Значение параметра "userId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResultQuizService/GetLastQuizResultsForUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResultQuizService/GetLastQuizResultsForUser", ReplyAction="http://tempuri.org/ResultQuizService/GetLastQuizResultsForUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetLastQuizResultsForUser(int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetLastQuizResultsForUser".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetLastQuizResultsForUser".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetLastQuizResultsForUser".</returns>
            QueryResult<QuizLogDTO> EndGetLastQuizResultsForUser(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetQuizResultById".
            /// </summary>
            /// <param name="quizResultId">Значение параметра "quizResultId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResultQuizService/GetQuizResultByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResultQuizService/GetQuizResultById", ReplyAction="http://tempuri.org/ResultQuizService/GetQuizResultByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetQuizResultById(int quizResultId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetQuizResultById".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetQuizResultById".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetQuizResultById".</returns>
            QueryResult<QuizResult> EndGetQuizResultById(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetQuizResultByQuizId".
            /// </summary>
            /// <param name="quizId">Значение параметра "quizId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResultQuizService/GetQuizResultByQuizIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResultQuizService/GetQuizResultByQuizId", ReplyAction="http://tempuri.org/ResultQuizService/GetQuizResultByQuizIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetQuizResultByQuizId(int quizId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetQuizResultByQuizId".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetQuizResultByQuizId".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetQuizResultByQuizId".</returns>
            QueryResult<QuizResult> EndGetQuizResultByQuizId(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetQuizResults".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResultQuizService/GetQuizResultsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResultQuizService/GetQuizResults", ReplyAction="http://tempuri.org/ResultQuizService/GetQuizResultsResponse")]
            [WebGet()]
            IAsyncResult BeginGetQuizResults(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetQuizResults".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetQuizResults".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetQuizResults".</returns>
            QueryResult<QuizResult> EndGetQuizResults(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetQuizResultsForUser".
            /// </summary>
            /// <param name="userId">Значение параметра "userId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResultQuizService/GetQuizResultsForUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResultQuizService/GetQuizResultsForUser", ReplyAction="http://tempuri.org/ResultQuizService/GetQuizResultsForUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetQuizResultsForUser(int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetQuizResultsForUser".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetQuizResultsForUser".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetQuizResultsForUser".</returns>
            QueryResult<QuizResult> EndGetQuizResultsForUser(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetStudentQuestionLog".
            /// </summary>
            /// <param name="resultQuizId">Значение параметра "resultQuizId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResultQuizService/GetStudentQuestionLogDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResultQuizService/GetStudentQuestionLog", ReplyAction="http://tempuri.org/ResultQuizService/GetStudentQuestionLogResponse")]
            [WebGet()]
            IAsyncResult BeginGetStudentQuestionLog(int resultQuizId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetStudentQuestionLog".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetStudentQuestionLog".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetStudentQuestionLog".</returns>
            QueryResult<QuestionLog> EndGetStudentQuestionLog(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetStudentScore".
            /// </summary>
            /// <param name="quizResultId">Значение параметра "quizResultId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResultQuizService/GetStudentScoreDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResultQuizService/GetStudentScore", ReplyAction="http://tempuri.org/ResultQuizService/GetStudentScoreResponse")]
            IAsyncResult BeginGetStudentScore(int quizResultId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetStudentScore".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetStudentScore".</param>
            /// <returns>Объект "Decimal", возвращенный из операции "GetStudentScore".</returns>
            decimal EndGetStudentScore(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResultQuizService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResultQuizService/SubmitChanges", ReplyAction="http://tempuri.org/ResultQuizService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ResultQuizContextEntityContainer : EntityContainer
        {
            
            public ResultQuizContextEntityContainer()
            {
                this.CreateEntitySet<QuestionLog>(EntitySetOperations.None);
                this.CreateEntitySet<QuizLogDTO>(EntitySetOperations.None);
                this.CreateEntitySet<QuizResult>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "RoleService" DomainService.
    /// </summary>
    public sealed partial class RoleContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="RoleContext"/>.
        /// </summary>
        public RoleContext() : 
                this(new WebDomainClient<IRoleServiceContract>(new Uri("MRZS-Web-Services-RoleService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="RoleContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы RoleService.</param>
        public RoleContext(Uri serviceUri) : 
                this(new WebDomainClient<IRoleServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="RoleContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public RoleContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="aspnet_Roles"/>, загруженных в данный экземпляр <see cref="RoleContext"/>.
        /// </summary>
        public EntitySet<aspnet_Roles> aspnet_Roles
        {
            get
            {
                return base.EntityContainer.GetEntitySet<aspnet_Roles>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="aspnet_Roles"/> с помощью запроса "GetAspnet_Roles".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="aspnet_Roles"/>.</returns>
        public EntityQuery<aspnet_Roles> GetAspnet_RolesQuery()
        {
            this.ValidateMethod("GetAspnet_RolesQuery", null);
            return base.CreateQuery<aspnet_Roles>("GetAspnet_Roles", null, false, true);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new RoleContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "RoleService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IRoleServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetAspnet_Roles".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RoleService/GetAspnet_RolesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RoleService/GetAspnet_Roles", ReplyAction="http://tempuri.org/RoleService/GetAspnet_RolesResponse")]
            [WebGet()]
            IAsyncResult BeginGetAspnet_Roles(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetAspnet_Roles".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetAspnet_Roles".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetAspnet_Roles".</returns>
            QueryResult<aspnet_Roles> EndGetAspnet_Roles(IAsyncResult result);
        }
        
        internal sealed class RoleContextEntityContainer : EntityContainer
        {
            
            public RoleContextEntityContainer()
            {
                this.CreateEntitySet<aspnet_Roles>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "SectionService" DomainService.
    /// </summary>
    public sealed partial class SectionContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="SectionContext"/>.
        /// </summary>
        public SectionContext() : 
                this(new WebDomainClient<ISectionServiceContract>(new Uri("MRZS-Web-Services-SectionService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="SectionContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы SectionService.</param>
        public SectionContext(Uri serviceUri) : 
                this(new WebDomainClient<ISectionServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="SectionContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public SectionContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="Section"/>, загруженных в данный экземпляр <see cref="SectionContext"/>.
        /// </summary>
        public EntitySet<Section> Sections
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Section>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Section"/> с помощью запроса "GetCurrentStudentSection".
        /// </summary>
        /// <param name="UserId">Значение параметра "UserId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Section"/>.</returns>
        public EntityQuery<Section> GetCurrentStudentSectionQuery(int UserId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserId", UserId);
            this.ValidateMethod("GetCurrentStudentSectionQuery", parameters);
            return base.CreateQuery<Section>("GetCurrentStudentSection", parameters, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Section"/> с помощью запроса "GetCurrentStudentSectionByUserName".
        /// </summary>
        /// <param name="UserLogin">Значение параметра "UserLogin" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Section"/>.</returns>
        public EntityQuery<Section> GetCurrentStudentSectionByUserNameQuery(string UserLogin)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserLogin", UserLogin);
            this.ValidateMethod("GetCurrentStudentSectionByUserNameQuery", parameters);
            return base.CreateQuery<Section>("GetCurrentStudentSectionByUserName", parameters, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Section"/> с помощью запроса "GetSectionById".
        /// </summary>
        /// <param name="sectionId">Значение параметра "sectionId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Section"/>.</returns>
        public EntityQuery<Section> GetSectionByIdQuery(int sectionId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sectionId", sectionId);
            this.ValidateMethod("GetSectionByIdQuery", parameters);
            return base.CreateQuery<Section>("GetSectionById", parameters, false, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Section"/> с помощью запроса "GetSections".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Section"/>.</returns>
        public EntityQuery<Section> GetSectionsQuery()
        {
            this.ValidateMethod("GetSectionsQuery", null);
            return base.CreateQuery<Section>("GetSections", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="Section"/> с помощью запроса "GetSectionsForBook".
        /// </summary>
        /// <param name="BookId">Значение параметра "BookId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="Section"/>.</returns>
        public EntityQuery<Section> GetSectionsForBookQuery(int BookId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("BookId", BookId);
            this.ValidateMethod("GetSectionsForBookQuery", parameters);
            return base.CreateQuery<Section>("GetSectionsForBook", parameters, false, true);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SectionContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "SectionService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ISectionServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetCurrentStudentSection".
            /// </summary>
            /// <param name="UserId">Значение параметра "UserId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SectionService/GetCurrentStudentSectionDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SectionService/GetCurrentStudentSection", ReplyAction="http://tempuri.org/SectionService/GetCurrentStudentSectionResponse")]
            [WebGet()]
            IAsyncResult BeginGetCurrentStudentSection(int UserId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetCurrentStudentSection".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetCurrentStudentSection".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetCurrentStudentSection".</returns>
            QueryResult<Section> EndGetCurrentStudentSection(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetCurrentStudentSectionByUserName".
            /// </summary>
            /// <param name="UserLogin">Значение параметра "UserLogin" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SectionService/GetCurrentStudentSectionByUserNameDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SectionService/GetCurrentStudentSectionByUserName", ReplyAction="http://tempuri.org/SectionService/GetCurrentStudentSectionByUserNameResponse")]
            [WebGet()]
            IAsyncResult BeginGetCurrentStudentSectionByUserName(string UserLogin, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetCurrentStudentSectionByUserName".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetCurrentStudentSectionByUserName".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetCurrentStudentSectionByUserName".</returns>
            QueryResult<Section> EndGetCurrentStudentSectionByUserName(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetSectionById".
            /// </summary>
            /// <param name="sectionId">Значение параметра "sectionId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SectionService/GetSectionByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SectionService/GetSectionById", ReplyAction="http://tempuri.org/SectionService/GetSectionByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetSectionById(int sectionId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetSectionById".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetSectionById".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetSectionById".</returns>
            QueryResult<Section> EndGetSectionById(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetSections".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SectionService/GetSectionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SectionService/GetSections", ReplyAction="http://tempuri.org/SectionService/GetSectionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSections(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetSections".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetSections".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetSections".</returns>
            QueryResult<Section> EndGetSections(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetSectionsForBook".
            /// </summary>
            /// <param name="BookId">Значение параметра "BookId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SectionService/GetSectionsForBookDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SectionService/GetSectionsForBook", ReplyAction="http://tempuri.org/SectionService/GetSectionsForBookResponse")]
            [WebGet()]
            IAsyncResult BeginGetSectionsForBook(int BookId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetSectionsForBook".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetSectionsForBook".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetSectionsForBook".</returns>
            QueryResult<Section> EndGetSectionsForBook(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SectionService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SectionService/SubmitChanges", ReplyAction="http://tempuri.org/SectionService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class SectionContextEntityContainer : EntityContainer
        {
            
            public SectionContextEntityContainer()
            {
                this.CreateEntitySet<Section>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "UserService" DomainService.
    /// </summary>
    public sealed partial class UserContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="UserContext"/>.
        /// </summary>
        public UserContext() : 
                this(new WebDomainClient<IUserServiceContract>(new Uri("MRZS-Web-Services-UserService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="UserContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы UserService.</param>
        public UserContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="UserContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public UserContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="User"/>, загруженных в данный экземпляр <see cref="UserContext"/>.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="User"/> с помощью запроса "GetStudents".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="User"/>.</returns>
        public EntityQuery<User> GetStudentsQuery()
        {
            this.ValidateMethod("GetStudentsQuery", null);
            return base.CreateQuery<User>("GetStudents", null, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="User"/> с помощью запроса "GetStudentsFroGroup".
        /// </summary>
        /// <param name="groupId">Значение параметра "groupId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="User"/>.</returns>
        public EntityQuery<User> GetStudentsFroGroupQuery(int groupId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("groupId", groupId);
            this.ValidateMethod("GetStudentsFroGroupQuery", parameters);
            return base.CreateQuery<User>("GetStudentsFroGroup", parameters, false, true);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="User"/> с помощью запроса "GetUserByAspUserName".
        /// </summary>
        /// <param name="aspUser_Name">Значение параметра "aspUser_Name" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="User"/>.</returns>
        public EntityQuery<User> GetUserByAspUserNameQuery(string aspUser_Name)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("aspUser_Name", aspUser_Name);
            this.ValidateMethod("GetUserByAspUserNameQuery", parameters);
            return base.CreateQuery<User>("GetUserByAspUserName", parameters, false, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="User"/> с помощью запроса "GetUserById".
        /// </summary>
        /// <param name="userId">Значение параметра "userId" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="User"/>.</returns>
        public EntityQuery<User> GetUserByIdQuery(int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            this.ValidateMethod("GetUserByIdQuery", parameters);
            return base.CreateQuery<User>("GetUserById", parameters, false, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="User"/> с помощью запроса "GetUsers".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="User"/>.</returns>
        public EntityQuery<User> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<User>("GetUsers", null, false, true);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "UserService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetStudents".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserService/GetStudentsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserService/GetStudents", ReplyAction="http://tempuri.org/UserService/GetStudentsResponse")]
            [WebGet()]
            IAsyncResult BeginGetStudents(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetStudents".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetStudents".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetStudents".</returns>
            QueryResult<User> EndGetStudents(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetStudentsFroGroup".
            /// </summary>
            /// <param name="groupId">Значение параметра "groupId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserService/GetStudentsFroGroupDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserService/GetStudentsFroGroup", ReplyAction="http://tempuri.org/UserService/GetStudentsFroGroupResponse")]
            [WebGet()]
            IAsyncResult BeginGetStudentsFroGroup(int groupId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetStudentsFroGroup".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetStudentsFroGroup".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetStudentsFroGroup".</returns>
            QueryResult<User> EndGetStudentsFroGroup(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetUserByAspUserName".
            /// </summary>
            /// <param name="aspUser_Name">Значение параметра "aspUser_Name" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserService/GetUserByAspUserNameDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserService/GetUserByAspUserName", ReplyAction="http://tempuri.org/UserService/GetUserByAspUserNameResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserByAspUserName(string aspUser_Name, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetUserByAspUserName".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetUserByAspUserName".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetUserByAspUserName".</returns>
            QueryResult<User> EndGetUserByAspUserName(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetUserById".
            /// </summary>
            /// <param name="userId">Значение параметра "userId" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserService/GetUserByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserService/GetUserById", ReplyAction="http://tempuri.org/UserService/GetUserByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserById(int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetUserById".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetUserById".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetUserById".</returns>
            QueryResult<User> EndGetUserById(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetUsers".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserService/GetUsers", ReplyAction="http://tempuri.org/UserService/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetUsers".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetUsers".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetUsers".</returns>
            QueryResult<User> EndGetUsers(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserService/SubmitChanges", ReplyAction="http://tempuri.org/UserService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class UserContextEntityContainer : EntityContainer
        {
            
            public UserContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "UserSectionService" DomainService.
    /// </summary>
    public sealed partial class UserSectionContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="UserSectionContext"/>.
        /// </summary>
        public UserSectionContext() : 
                this(new WebDomainClient<IUserSectionServiceContract>(new Uri("MRZS-Web-Services-UserSectionService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="UserSectionContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы UserSectionService.</param>
        public UserSectionContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserSectionServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="UserSectionContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public UserSectionContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="UserSection"/>, загруженных в данный экземпляр <see cref="UserSectionContext"/>.
        /// </summary>
        public EntitySet<UserSection> UserSections
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserSection>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="UserSection"/> с помощью запроса "GetUserSections".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="UserSection"/>.</returns>
        public EntityQuery<UserSection> GetUserSectionsQuery()
        {
            this.ValidateMethod("GetUserSectionsQuery", null);
            return base.CreateQuery<UserSection>("GetUserSections", null, false, true);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserSectionContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "UserSectionService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserSectionServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetUserSections".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserSectionService/GetUserSectionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserSectionService/GetUserSections", ReplyAction="http://tempuri.org/UserSectionService/GetUserSectionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserSections(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetUserSections".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetUserSections".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetUserSections".</returns>
            QueryResult<UserSection> EndGetUserSections(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserSectionService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserSectionService/SubmitChanges", ReplyAction="http://tempuri.org/UserSectionService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class UserSectionContextEntityContainer : EntityContainer
        {
            
            public UserSectionContextEntityContainer()
            {
                this.CreateEntitySet<UserSection>(EntitySetOperations.All);
            }
        }
    }
}
